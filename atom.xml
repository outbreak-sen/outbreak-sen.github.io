<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This is a 部落格 of outbreak_sen</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="http://outbreak-sen.github.io/atom.xml" rel="self"/>
  
  <link href="http://outbreak-sen.github.io/"/>
  <updated>2025-02-13T02:47:55.255Z</updated>
  <id>http://outbreak-sen.github.io/</id>
  
  <author>
    <name>outbreak_sen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FPV ESC学习笔记</title>
    <link href="http://outbreak-sen.github.io/2025/02/13/FPV-ESC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://outbreak-sen.github.io/2025/02/13/FPV-ESC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-02-13T02:17:58.000Z</published>
    <updated>2025-02-13T02:47:55.255Z</updated>
    
    <content type="html"><![CDATA[<h1>BLheli电调与Dshot通讯</h1><p>这里首先介绍一下基本概念</p><ul><li><p>电调ESC：全称电子速度控制器，一个电机需要控制转动，需要电调ESC，电调负责把输入的直流电转化为三相电等输入，根据飞行控制器的输入指令（FC）调节电机的速度（和方向）。。</p></li><li><p>电调原理：电调是芯片加一堆mos组成的，芯片负责接收控制信号，然后控制mos的通断，把输入的直流电通过mos通断变化为不同的三相电等</p></li><li><p>电调固件：电调里面的芯片会烧录一个程序，这个程序就是电调固件，这个电调固件有很多开源的方案，比如BLHeli，BLHeli_S，这些是写好的，并且有很多功能比如温度控制等。</p></li><li><p>电调通讯协议：电调里的芯片接收控制信号也有很多，称为电调通讯协议，比如Dshot，PWM，Oneshot，其中dshot是目前最好的。有人提出这些通讯协议之后，这些BLHeli之类的固件就会兼容这些协议，比如BLHeli一般是兼容PWM，Oneshot，Dshot的。<strong>其中PWM的是需要校准最小值和最大值之后才能控制。</strong></p></li><li><p>电调固件如何兼容不同协议：电调固件兼容各种电调通讯协议，具体而言，在固件里有一个分类器，输入不同协议的命令，他会先判别是什么协议然后再执行。<br><a href="https://www.cnblogs.com/Sky-seeker/p/14358676.html">一个参考-无刷电调基础知识以及BLHeli固件烧录和参数调整 - 梦幻之心星 - 博客园 (cnblogs.com)</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/122a27a4aa9bf878d4eef13b5458fdd5.jpeg" alt="电调工作原理"></p></li></ul><h2 id="电调固件">电调固件</h2><p>电调固件是在每个电调上运行的软件，它确定电调的性能，支持的协议以及可以使用的配置接口。电调可以使用的固件取决于硬件。</p><ul><li><strong>SimonK</strong>：最古老的两种开源电调固件之一，已经过时不再更新。内嵌了一个开环foc驱动</li><li><strong>BLHeli</strong>：最古老的两种开源电调固件之一，由于其广泛的功能和友好的用户界面而变得流行。</li><li><strong>BLHeli_S</strong>：BLHeli固件的第二代。专门为具有<em>Busybee</em>处理器的电调开发。</li><li><strong>BLHeli_32</strong>：第三代和最新一代BLHeli固件。专门为32位电调编写，不再开源。</li></ul><h2 id="blheli固件">BLheli固件</h2><h4 id="固件命名：">固件命名：</h4><p>BLHeli_S代码除了修订版外，还用一个字母、另一个字母和两个数字命名。例如&quot;A_L_10_REV16_0.HEX&quot;。</p><p>第一个字母表示MCU的引脚；</p><p>第二个字母是L或H（L代表24MHz MCU，H代表48MHz MCU）；</p><p>这两个数字表示FET的开关死区时间。单位为20.4ns。一些场效应晶体管驱动器具有自适应场效应晶体管死区时间控制，对于这些MOS管，则用00表示场效应晶体管开关死区时间。</p><h4 id="可设置参数">可设置参数</h4><ul><li><p>启动功率：启动功率可设置为0.031到1.5之间的相对值。这是启动期间允许的最大功率。实际应用的功率取决于节气门输入，可以更低，但最低电平是最高电平的四分之一。启动功率也会影响双向操作，因为该参数用于限制方向反转期间应用的功率。于低转速，电机的最大功率是有限的，以便于检测低反电势电压。允许的最大功率可通过启动功率参数设置。较低的启动功率参数将为较低转速提供较低的最大功率（这从rev16.1开始实施）。</p></li><li><p>**换向时间：**换向定时可设置为低/中低/中/中高/高，对应于00/7.50/150/22.50/300定时提前。一般来说，一个中等设置将工作良好，但如果电机口吃它可以是有益的改变时间。一些高电感的电机可以有很长的换相退磁时间。这可能会导致电机停止或口吃时，快速油门增加，特别是在运行在低转速。将定时设置为高将允许更多的时间去消磁，通常是有帮助的。</p></li><li><p>**消磁补偿：**消磁补偿是一种保护电机不因换相后较长的绕组退磁时间而失速的功能。典型的症状是发动机停止或快速增加油门时卡顿，特别是在低转速运行时。如上所述，设置高换向时间通常有帮助，但以效率为代价。</p></li><li><p>**方向：**旋转方向可设置为前进/后退/双向前进/双向后退。在双向模式下，中央油门为零，上面为前进方向旋转，下面为反向旋转。当选择双向操作时，TX编程被禁用。</p></li><li><p>**嘟嘟声强度：**设置正常运行时的蜂鸣音强度。</p></li><li><p>**信标强度：**设置蜂鸣信标蜂鸣时蜂鸣的强度。如果油门信号在给定时间内为零，电子悬架控制系统将开始发出蜂鸣声。请注意，设置高信标强度可能会导致电机或ESC过热！</p></li><li><p>**信标延迟：**信标延迟设置信标哔哔声开始前的延迟。</p></li><li><p>**最小油门、最大油门和中值油门：**这些设置设置ESC的油门范围。中央油门仅用于双向操作。为这些设置提供的值适用于正常的1000us到2000us输入信号，对于其他输入信号，这些值必须按比例缩放。</p></li><li><p>**热保护：**可以启用或禁用热保护。温度阈值可以在800C和1400C之间编程（可编程阈值从rev16.3开始执行）。可编程阈值主要是为了支持硬件制造商使用，因为不同的硬件可以对所使用的各种组件的最高温度有不同的公差。</p></li><li><p>**低转速功率保护：**可以启用或禁用低转速的功率限制。禁用它可能是必要的，以实现在低电源电压下运行的一些低kV电机的全功率。但是，禁用它会增加同步丢失的风险，并可能导致电机或电子稳定控制系统过热。</p></li><li><p>**停止时制动：**可以启用或禁用制动停止。启用时，油门为零时将应用制动器。对于非零油门，此设置无效。</p></li><li><p>**LED控制：**LED可以在支持它的ESC上控制。最多可以打开或关闭4个LED。</p></li></ul><h3 id="blheli蜂鸣器含义">BLHeli蜂鸣器含义</h3><p>对于BLHeli电调，上电的时候会发出一些声音，实际上每个声音都有自己的意思，如下：</p><ul><li>100%上电时，电子稳定控制系统鸣叫3次。</li><li>当检测到油门信号时，它会发出一声低沉的哔哔声。这表示开始警戒序列。</li><li>然后，当或如果油门为零，它会发出一声高音哔哔声。这标志着警戒序列的结束。</li><li>此外，如果在启用顺序期间检测到100%油门，电子悬架控制系统将开始油门校准。</li><li>如果电子稳定控制系统处于待命状态，并在给定时间内看到零油门，它会发出信标哔哔声，大约每三秒发出一声哔哔声。</li></ul><h3 id="blheli的热保护：">BLHeli的热保护：</h3><p>ESC测量MCU内的温度，如果温度过高，则限制电机功率。电机功率分四步限制：</p><p>-  如果温度高于临界值，电机功率限制在75%。</p><p>-  如果温度高于阈值加上50摄氏度，电机功率限制在50%。</p><p>-  如果温度高于阈值加上100摄氏度，电机功率限制在25%。</p><p>-  如果温度高于阈值+150℃，则电机功率限制为0%。</p><h3 id="blheli上位机-blheli-suite">BLheli上位机——BLheli suite</h3><p>传统改变固件参数的方法是编译一个固件之后通过arduino nano烧录到电调里面来设置如上一堆值。</p><p>但是现在有了BLheli，可以通过上位机对电调进行参数修改，具体方法是用一个betaflight的飞控板连接上电调，用电调来改。</p><h3 id="blheli固件烧录">BLheli固件烧录</h3><p>比较简单，但是需要arduino uno，CH340，BLheli Suite，可以搜一下教程，需要把几个焊点和arduino连接，或者直接用Betaflight的飞控板貌似也能烧录。</p><p><a href="https://www.elvinplay.com/how-to-flash-esc-with-blheli-without-soldering/">懒人免焊接傻瓜包会从零开始给电调刷BLHELI固件 – Elvin Play</a></p><h2 id="电调协议">电调协议</h2><p>电调协议是飞行控制器和电调用于通信的<em>语言</em>，决定了信号从飞控到电调的发送速度。四轴飞行器使用的电调协议及信号宽度如下，从上而下依次高级</p><ul><li>最传统PWM ：1000us – 2000us</li><li><a href="https://oscarliang.com/oneshot125-esc-quadcopter-fpv/">Oneshot125模拟协议</a>：125us – 250us</li><li><a href="http://intofpv.com/t-oneshot42-explained-kiss-esc-fc-protocol">Oneshot 42模拟协议</a>：2us – 84us</li><li><a href="https://oscarliang.com/raceflight-multishot/">Multishot模拟协议</a>：5us – 25us</li><li>Dshot数字协议<ul><li>Dshot150 ：106.8us</li><li>Dshot300 ：53.4us</li><li>Dshot600 ：26.7us</li><li><a href="https://oscarliang.com/dshot1200-esc-protocol/">DShot1200</a>：13.4us</li></ul></li><li>ProShot</li></ul><h3 id="模拟电调和数字电调区别">模拟电调和数字电调区别</h3><p>模拟电调协议每隔几微秒就将电脉冲从飞控发送到电调。脉冲持续时间的长短（油门大小）决定了电机的功率。这种控制方案受到电噪声和电脉冲定时精度的限制。</p><p>使用 DShot 数字电调意味着飞控将以数字编号的形式向电调发送精确的油门值。这个数字将有一个校验值，以便从飞控发送到电调的油门值永远不会被识别错误。</p><p>与Oneshot和Multishot相比，DShot有什么优势：</p><ul><li>无需进行电调行程校准</li><li>更精确的传输信号，更强大的抗干扰能力</li><li>分辨率为2048，而其他协议分辨率为1000</li><li>比Oneshot协议更快</li><li>更安全，每个信号 电调都可以检测yifan损坏的数据</li><li>DSHOT并不是效率最高的协议</li></ul><h2 id="pwm">PWM</h2><p>PWM ESC 通常用于固定翼车辆和地面航模，对于FPV通常使用 oneshot 或 dshot ESC，但这是最传统的电调通讯协议。PWM ESC 使用周期性脉冲进行通信，其中脉冲的宽度表示所需的功率水平。脉冲带宽通常介于 1000uS （零功率） 和 2000uS （全功率） 之间。信号的周期性帧速率取决于 ESC 的能力，通常在 50Hz 和 490 Hz 之间理论最大值为 500Hz，速率越高，ESC 越好，尤其是在需要快速响应设定值变化的情况下。对于 PWM 伺服系统，50Hz 通常就足够了，许多不支持更高的速率。</p><h2 id="oneshot">Oneshot</h2><p>OneShot 125 电调通常比 PWM 电调快得多，因此响应更快，更容易调整。对于多旋翼飞行器，它们比 PWM 更受欢迎，但不如 DShot ESC，因为Dshot不需要校准，并且可以提供遥测反馈。OneShot 协议有许多变体，它们支持不同的速率，比如oneshot42,oneshot125。</p><p>OneShot 125 与 PWM 相同，但使用的脉冲宽度短 8 倍（从 125us 到 250us，从零功率到全功率）。这使得 OneShot 125  ESC 具有更短的占空比/更高的速率。对于 PWM，理论最大值接近 500 Hz，而对于 OneShot，则接近 4  kHz。实际支持的速率取决于所使用的 ESC。</p><h2 id="dshot">Dshot</h2><p>DShot（Digital Shot，是数字协议）（相对于oneshot，oneshot125，oneshot42，multishot等模拟协议）。它最初是由Felix在KISS提出的，后来被Betaflight和BLHeli_S开发团队采用。<strong>是用来和刷有BLheli固件的电调通讯的协议。</strong></p><ul><li>BLHeli固件开源地址：<a href="https://github.com/bitdump/BLHeli.git">https://github.com/bitdump/BLHeli.git</a></li><li>BLHeli上位机：<a href="https://github.com/blheli-configurator/blheli-configurator.git">https://github.com/blheli-configurator/blheli-configurator.git</a></li></ul><h3 id="dshot的速度">DShot的速度</h3><p>目前常用的DShot协议有：DShot600，DShot300，DShot150 （DShot1200已经在最新的betaflight4.11固件取消了），其传输速率：</p><ul><li><p>DShot600 – 600,000 bits/Sec</p></li><li><p>DShot300 – 300,000 bits/Sec</p></li><li><p>DShot150 – 150,000 bits/Sec</p></li></ul><p>引入 DSHOT300 和 DSHOT150 是为了确保支持功能较弱的旧ESC电调，DSHOT1200是较新的协仪，有些电调可能还不支持。</p><p>例如，DShot600的频率为600,000 / 1637500hz= 37.5 KHz，这意味着将一个油门值从飞控发送到电调需要大约26.7 uS。各种电调传输协议速度对比与 Oneshot125、 Oneshot42和 Multishot 的速度相比(假设信号是100% 油门)</p><ul><li><p>Oneshot125 – 250 uS</p></li><li><p>DShot150 – 106.7 uS</p></li><li><p>Oneshot42 – 84 uS</p></li><li><p>DShot300 – 53.3 uS</p></li><li><p>DShot600 – 26.7 uS</p></li><li><p>Multishot – 25 uS</p></li></ul><p>快速传输速度的 DShot 理论上将允许高达33KHz的飞控运行频率。但是不要高达37.5 KHz，因为需要留有一些空间。虽然 DShot600没有 Multishot 那么快，但是只要它比飞控运行频率快就足够了。</p><h3 id="dshot600数据帧">Dshot600数据帧</h3><p>一个 DShot 数据包由16位组成</p><ul><li>11位表示油门值(2^10= 2048分辨率)</li><li>1位表示遥测请求是telemetry请求标志，tlm需要电调硬件支持</li><li>4位表示 CRC 校验(循环冗余校验)</li><li>速度600kbits/s，一帧信号的长度为26.7us。</li><li>对于DSHOT600，整个比特位的长度为1.67us（T0H+T0L或T1H+T1L），0的高电平时间为625ns，1的高电平时间是1250ns。</li><li>帧与帧之间需要一点间隔（2-3us），以区别不同的帧信号 <img src="https://i-blog.csdnimg.cn/blog_migrate/0d6a8f70ce815666c70810aeb6ee1ada.png" alt="最详细的DSHOT协议介绍"></li><li>11位油门值可以达到2048的分辨率，实际使用48-2047表示油门值，所以油门信号是2000的分辨率，0是上电后的默认值（锁定值），1-47表示一些命令和设置，一些值的意义如下：<ul><li>1-5：beep（1= low freq. 5 = high freq</li><li>esc信息请求（fw版本和通过tlm线发送的SN）</li><li>7：一个方向旋转</li><li>8：另一个方向旋转</li><li>9：3d模式关闭</li><li>10：3d模式打开</li><li>11：esc设置请求（saved settings over the TLM wire）</li><li>12：保存设置</li></ul></li></ul><h3 id="双向dshot">双向dshot</h3><p>Joe Lucid更进一步引入了双向 DSHOT协议。支持双向dshot的电子调速器ESC能够向飞行控制器发送遥测数据，包括：</p><ul><li>温度</li><li>电压</li><li>当前</li><li>累积电流消耗</li><li>转速值</li></ul><p><strong>这些 DShot ESC 将有一条额外的遥测线。</strong></p><p>要启用此功能（在支持此功能的电调上使用）：将所有电调的遥测线连接在一起，然后将它们连接到未使用的飞行控制器串行端口上的一个 RX 引脚。</p><p>在通讯方式上，双向DSHOT信号使用反转电平（空闲为 1）。 FC 到 ESC 使用 DSHOT 帧，但最低 4 位是其他半字节异或后的反码（正常DSHOT的校验是不反码的）。</p><h2 id="一套dshot通讯参考代码1">一套Dshot通讯参考代码1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ESC_BIT_0     11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ESC_BIT_1     22</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ESC_CMD_BUF_LEN 18</span></span><br><span class="line"><span class="type">uint16_t</span> ESC_CMD[ESC_CMD_BUF_LEN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> <span class="title function_">prepareDshotPacket</span><span class="params">(<span class="type">const</span> <span class="type">uint16_t</span> value, <span class="type">int8_t</span> requestTelemetry)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 油门大小为11位  所以这里先左移一位 添加上请求回传标志共12位</span></span><br><span class="line">    <span class="type">uint16_t</span> packet = (value &lt;&lt; <span class="number">1</span>) | (requestTelemetry ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 将12位数据分为3组 每组4位, 进行异或</span></span><br><span class="line"><span class="comment">// compute checksum</span></span><br><span class="line"><span class="type">int</span> csum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> csum_data = packet;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    csum ^=  csum_data;   <span class="comment">// xor data by nibbles</span></span><br><span class="line">    csum_data &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取最后四位 其他的不要</span></span><br><span class="line">csum &amp;= <span class="number">0xf</span>;</span><br><span class="line"><span class="comment">// append checksum 将CRC添加到后四位</span></span><br><span class="line">packet = (packet &lt;&lt; <span class="number">4</span>) | csum;</span><br><span class="line"><span class="keyword">return</span> packet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pwmWriteDigital</span><span class="params">(<span class="type">uint16_t</span> *esc_cmd, <span class="type">uint16_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">value = ( (value &gt; <span class="number">2047</span>) ? <span class="number">2047</span> : value );</span><br><span class="line">value = prepareDshotPacket(value, <span class="number">0</span>);</span><br><span class="line">    esc_cmd[<span class="number">0</span>]  = (value &amp; <span class="number">0x8000</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">1</span>]  = (value &amp; <span class="number">0x4000</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">2</span>]  = (value &amp; <span class="number">0x2000</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">3</span>]  = (value &amp; <span class="number">0x1000</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">4</span>]  = (value &amp; <span class="number">0x0800</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">5</span>]  = (value &amp; <span class="number">0x0400</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">6</span>]  = (value &amp; <span class="number">0x0200</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">7</span>]  = (value &amp; <span class="number">0x0100</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">8</span>]  = (value &amp; <span class="number">0x0080</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">9</span>]  = (value &amp; <span class="number">0x0040</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">10</span>] = (value &amp; <span class="number">0x0020</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">11</span>] = (value &amp; <span class="number">0x0010</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">12</span>] = (value &amp; <span class="number">0x8</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">13</span>] = (value &amp; <span class="number">0x4</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">14</span>] = (value &amp; <span class="number">0x2</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    esc_cmd[<span class="number">15</span>] = (value &amp; <span class="number">0x1</span>) ? ESC_BIT_1 : ESC_BIT_0;</span><br><span class="line">    HAL_TIM_PWM_Start_DMA(&amp;htim1,TIM_CHANNEL_1,(<span class="type">uint32_t</span> *)esc_cmd,ESC_CMD_BUF_LEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;BLheli电调与Dshot通讯&lt;/h1&gt;
&lt;p&gt;这里首先介绍一下基本概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电调ESC：全称电子速度控制器，一个电机需要控制转动，需要电调ESC，电调负责把输入的直流电转化为三相电等输入，根据飞行控制器的输入指令（FC）调节电机的速度（和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LLVM tablegen</title>
    <link href="http://outbreak-sen.github.io/2025/02/11/LLVM-tablegen/"/>
    <id>http://outbreak-sen.github.io/2025/02/11/LLVM-tablegen/</id>
    <published>2025-02-11T02:19:57.000Z</published>
    <updated>2025-02-12T06:20:26.074Z</updated>
    
    <content type="html"><![CDATA[<h1>LLVM和LLVM tablegen学习笔记</h1><h2 id="llvm介绍">LLVM介绍</h2><p>LLVM 是一个跨平台（可在 Linux、Windows 和 Mac 上使用）C/C++ 编译器工具集，像 GCC一样。 LLVM 可以编译用  C、C++ 和 Objective-C 编写的代码。  LLVM 通过 libc++ 和 libc++ ABI 项目支持 C++11、C++14 和 C++17。 LLVM 还部分支持最新的 C++20 和 C++2b 标准。LLVM之所以优秀，在于以下几点：</p><ul><li>LLVM的中间表达（IR）是可以阅读的文本形式的，其他很多编译器却只有内存中的数据结构，使得学习调试难度大增。</li><li>LLVM 工具集提供的 Clang 可以比 GCC 更快地编译 C 和 C++ 代码。与  GCC 相比，LLVM 调试器 LLDB 的内存效率更高，加载符号的速度更快。</li><li>始于学术项目一个博士的项目，但LLVM一直受到工业界Apple的支持，clang（是llvm的前端）和LLVM都是apple搞出来的，因为gcc他们不满意，后来apple研发的swift也是基于llvm作为编译器，后来研发llvm的这个人去了Tesla，google，tensorflow。LLVM不仅好用，而且开源可定制。避免了在Java中类似面临选择HotSpot和jikes的困境。</li></ul><p>**你可以基于LLVM提供的功能开发自己的模块，并集成在LLVM系统上，增加它的功能，或者就单纯自己开发软件工具，而利用LLVM来支撑底层实现。**LLVM是一个编译器框架。LLVM作为编译器框架，是需要各种功能模块支撑起来的，你可以将clang和lld都看做是LLVM的组成部分</p><h2 id="llvm如何工作">LLVM如何工作</h2><p><img src="./LLVM-tablegen/image-20250211153154584.png" alt="image-20250211153154584"></p><p>看起来就是三个步骤：</p><ul><li>前端：获取源代码并将其转换为<em>中间表示</em>或 IR。这种翻译简化了编译器其余部分的工作，它不想处理 C++ 源代码的全部复杂性。比如Clang。LLVM IR是LLVM的中间表示，这是LLVM中很重要的一个东西，介绍它的文档就一个，LLVM Language Reference Manual</li><li>将IR 转换为 IR的Pass：在一般情况下，pass 通常会优化代码：生成另一个 IR 程序作为输出。新生成的IR与上一个IR效果相同，只是它更快更优。如果说要把一个语言编译好的**整个编译过程中使用相同的 IR <em>。<em>在其他编译器中，每次传递都可能以独特的形式生成代码。</em></em></li><li>后端：生成实际的机器码。很多时候不需要接触这部分。</li></ul><h3 id="我要做什么？">我要做什么？</h3><p>我需要给mindspore添加一个算子，这个算子是深度学习里面的一个计算方法addlayernorm，我要把这个计算方法变成mindspore里面的一个运算符，就像mindspore的编译器已经有+、-、*，我要基于已有的运算符编写一个新的运算符。这样之后的人用到addlayernorm可以直接用我写的，然后编译器自动编译好，而不是还需要先add再layernorm</p><h2 id="llvm安装">LLVM安装</h2><h3 id="apt安装">apt安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个mindspore推荐的快速安装方式</span></span><br><span class="line">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install llvm-12-dev -y <span class="comment">#但是这样系统找不到llvm，cmake也找不到</span></span><br><span class="line"><span class="comment"># 注意llvm-config --version找不到，因为环境中可能有llvm-config-12和llvm-config-14,但没设置默认的</span></span><br><span class="line">llvm-config-12 --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是另一个官方的安装方法</span></span><br><span class="line"><span class="comment"># clang 和 clang++ 程序是 LLVM 工具集的一部分。 clang用于编译C程序，clang++用于编译C++程序。</span></span><br><span class="line"><span class="built_in">sudo</span> apt install clang lldb lld</span><br><span class="line">clang --version <span class="comment">#安装号之后就可以clang hello.c -o hello_c 生成可执行文件hello_c</span></span><br><span class="line">clang++ --version <span class="comment">#安装号之后就可以clang++ hello.cpp -o hello_cpp生成可执行文件hello_cpp</span></span><br><span class="line"><span class="comment"># 安装llvm 默认情况下不会自动安装Clang</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install llvm-12</span><br><span class="line"><span class="comment"># 查看llvm版本</span></span><br><span class="line">llvm-config-12 --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是llvm和clang都有版本的问题，有时候需要制定版本，比如gcc9也是这样的</span></span><br><span class="line"><span class="comment"># 首先，添加所有可用的 llvm-config 版本到 update-alternatives：一般就12和14两个</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-12 20</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 10</span><br><span class="line"><span class="comment"># 选择默认版本</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --config llvm-config</span><br><span class="line"><span class="comment"># 这样就可以找到llvm-config --version命令了，而不是非写llvm-config-12</span></span><br><span class="line">llvm-config --version</span><br><span class="line"><span class="comment"># 添加所有可用的 clang 版本到 update-alternatives</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 20</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 10</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 20</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 10</span><br><span class="line"><span class="comment"># 选择默认版本</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --config clang</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --config clang++</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是这样cmake还是找不到</span></span><br><span class="line"><span class="comment">#llvmCMake Error at CMakeLists.txt:13 (include):</span></span><br><span class="line"><span class="comment">#  include could not find requested file: AddLLVM</span></span><br><span class="line"><span class="comment"># 要找到llvm的安装位置，然后export了</span></span><br><span class="line"><span class="built_in">which</span> llvm-config</span><br><span class="line">/usr/bin/llvm-config <span class="comment">#发现可执行文件在bin里</span></span><br><span class="line"><span class="comment">#头文件/usr/include/llvm-12/</span></span><br><span class="line"><span class="comment">#库文件/usr/lib/llvm-&lt;version&gt;/</span></span><br><span class="line"><span class="comment">#则cmake链接到库文件/usr/lib/llvm-&lt;version&gt;/lib/cmake/llvm/这是 CMake 查找 LLVMConfig.cmake 和 AddLLVM.cmake 的关键路径。</span></span><br><span class="line"><span class="built_in">export</span> LLVM_DIR=/usr/lib/llvm-12/lib/cmake/llvm/</span><br><span class="line"><span class="comment"># 但是我很奇怪12版本的找不到路径，addllvm死活找不到，，所以改成14了</span></span><br><span class="line"><span class="built_in">export</span> LLVM_DIR=/usr/lib/llvm-14/lib/cmake/llvm/</span><br><span class="line"><span class="comment"># set(LLVM_DIR &quot;/usr/lib/llvm-14/lib/cmake/llvm/&quot;) #在cmake里面可以加</span></span><br></pre></td></tr></table></figure><h3 id="cmake编译安装-还没必要">Cmake编译安装（还没必要）</h3><h2 id="llvm语言的一个快速入门">LLVM语言的一个快速入门</h2><p><a href="https://llvm.org/doxygen/">LLVM的doxygen</a></p><p><a href="https://llvm.org/docs/LangRef.html">中间表示IR的语法书</a></p><p><a href="https://llvm.org/docs/ProgrammersManual.html">开发者手册</a></p><p><a href="https://llvm.gnu.ac.cn/docs/TableGen/index.html">开发者手册中文，但是还是要看英文的，比如里面把class直接翻译成类，而class我觉得在这里面不能翻译</a></p><p><a href="https://www.cnblogs.com/Five100Miles/p/11025680.html">这个人的笔记很不错</a></p><ul><li><p>pass：编写一个LLVM的规则，比如把一个函数里面的所有+法变成*法，被称为一个pass。在LLVM中优化以pass形式实现, 每一个pass代表一种优化. pass分为两类,</p><ul><li>一类是分析(analysis)pass,  算相关IR单元的高层信息，但不对其进行修改。这些信息可以被其他Pass使用，或用于调试和程序可视化。换言之，Analysis Pass会从对应的IR单元中挖掘出需要的信息，然后进行存储，并提供查询的接口，让其它Pass去访问其所存储的信息。</li><li>另一类是变换(transform)pass, 可以使用Analysis Pass的分析结果，然后以某种方式改变和优化IR。也就是说，这类Pass是会改变IR的内容的，可能会改变IR中的指令，也可能会改变IR中的控制流。</li></ul><p>还有一种Utility Pass不算进去了，LLVM中实现了几十种优化pass, 其中许多pass运行不止一次. analysis  pass存放在lib/Analysis下, transform pass存放在lib/Transforms下</p></li><li><p>dump：一种语言编译成其他语言的过程，在llvm指的是一种语言变成IR（中间表示）的过程，这个也是llvm的一个函数，可以实现输出IR</p></li></ul><h3 id="读取并打印函数名称">读取并打印函数名称</h3><p>首先LLVM用C++编写，然后用cmake进行编译，变成成一个pass</p><p>这里是仓库 git clone <a href="mailto:git@github.com">git@github.com</a>:sampsyo/llvm-pass-skeleton.git</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Skeleton.cpp中</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Passes/PassBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Passes/PassPlugin.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SkeletonPass</span> : <span class="keyword">public</span> PassInfoMixin&lt;SkeletonPass&gt; &#123;</span><br><span class="line">    <span class="function">PreservedAnalyses <span class="title">run</span><span class="params">(Module &amp;M, ModuleAnalysisManager &amp;AM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;F : M) &#123;</span><br><span class="line">            <span class="meta"># errs()是一个LLVM提供的C++输出流，我们可以用它来输出到控制台</span></span><br><span class="line">            # 这个程序的意义是在编译过程中把每个函数的名称打印出来</span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;I saw a function called &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">all</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> LLVM_ATTRIBUTE_WEAK ::<span class="function">llvm::PassPluginLibraryInfo</span></span><br><span class="line"><span class="function"><span class="title">llvmGetPassPluginInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        .APIVersion = LLVM_PLUGIN_API_VERSION,</span><br><span class="line">        .PluginName = <span class="string">&quot;Skeleton pass&quot;</span>,</span><br><span class="line">        .PluginVersion = <span class="string">&quot;v0.1&quot;</span>,</span><br><span class="line">        .RegisterPassBuilderCallbacks = [](PassBuilder &amp;PB) &#123;</span><br><span class="line">            PB.<span class="built_in">registerPipelineStartEPCallback</span>(</span><br><span class="line">                [](ModulePassManager &amp;MPM, OptimizationLevel Level) &#123;</span><br><span class="line">                    MPM.<span class="built_in">addPass</span>(<span class="built_in">SkeletonPass</span>());</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmakelists里面编写生成一个pass，最终会获得build/skeleton/SkeletonPass.so</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load LLVMConfig.cmake. If this fails, consider setting `LLVM_DIR` to point</span></span><br><span class="line"><span class="comment"># to your LLVM installation&#x27;s `lib/cmake/llvm` directory.</span></span><br><span class="line"><span class="comment"># set(LLVM_DIR &quot;/usr/lib/llvm-14/lib/cmake/llvm/&quot;) #找不到可以加</span></span><br><span class="line"><span class="keyword">find_package</span>(LLVM REQUIRED CONFIG)</span><br><span class="line"><span class="comment"># Include the part of LLVM&#x27;s CMake libraries that defines</span></span><br><span class="line"><span class="comment"># `add_llvm_pass_plugin`.</span></span><br><span class="line"><span class="keyword">include</span>(AddLLVM)</span><br><span class="line"><span class="comment"># Use LLVM&#x27;s preprocessor definitions, include directories, and library search</span></span><br><span class="line"><span class="comment"># paths.</span></span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="variable">$&#123;LLVM_DEFINITIONS&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;LLVM_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LLVM_LIBRARY_DIRS&#125;</span>)</span><br><span class="line"><span class="comment"># 要includeaddllvm才能用下面这个命令</span></span><br><span class="line">add_llvm_pass_plugin(SkeletonPass</span><br><span class="line">    <span class="comment"># List your source files here.</span></span><br><span class="line">    Skeleton.cpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>获得了这个build/skeleton/SkeletonPass.so，就可以在clang的时候永乐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.* 某个c程序.c</span> </span><br><span class="line">I saw a function called main!# 这里就会打印函数名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-Xclang -load -Xclang path/to/lib.so这是你在Clang中载入并激活你的流程所用的所有代码。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所以当你处理较大的项目的时候，你可以直接把这些参数加到Makefile的CFLAGS里或者你构建系统的对应的地方。</span></span><br></pre></td></tr></table></figure><h3 id="如何查看ir">如何查看IR</h3><p>LLVM IR有三种表现形式:</p><ul><li>在编译器内部的IR</li><li>在磁盘中存储的bitcode(用于JIT编译器)</li><li>最常见的易于阅读的LLVM IR汇编. 三种格式的IR是等价的(可互相转化), 因此LLVM IR提供了高效的编译器优化手段的同时又保证了方便调试与定位问题.</li></ul><p>使用IR的优点.</p><ol><li>通用, 任意语言都能转换为IR, 同一IR能转换为任意架构汇编.</li><li>可移植性好, 容易定位问题,  只要保证IR正确性就能确定问题范围(前端还是后端还是某个优化pass).</li><li>支持LTO(link time optimization).LLVM编译的时候会顺序读取程序的每个指令，一套程序可以这样组成</li></ol><p><img src="./LLVM-tablegen/image-20250212112813600.png" alt="image-20250212112813600"></p><ul><li>模块表示了一个源文件</li><li>源文件里面都是函数</li><li>函数主要会做为代码块的容器</li><li>指令就是一条单独的代码命令</li></ul><h4 id="如何生成ir">如何生成IR</h4><p>在编译时添加选项-emit-llvm即可生成IR, 此时的IR为bitcode格式(默认文件名后缀为bc), 若要生成汇编格式还需添加-S选项(默认文件名后缀为ll).</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm -S -o - 某个c程序.c <span class="comment">#这个就可以把c程序变成IR进行阅读，-emit-llvm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/test.c</span><br><span class="line"> 2 int <span class="built_in">test</span>(int a, int b)</span><br><span class="line"> 3 &#123;</span><br><span class="line"> 4   int c = 0;</span><br><span class="line"> 5   <span class="keyword">if</span> (a) &#123;</span><br><span class="line"> 6     c = b;</span><br><span class="line"> 7     a = c;</span><br><span class="line"> 8   &#125;</span><br><span class="line"> 9   <span class="built_in">return</span> c;</span><br><span class="line">10 &#125;</span><br><span class="line">../llvm_build/bin/clang ~/test.c -O0 -emit-llvm -S -o ~/test.ll</span><br><span class="line"><span class="built_in">cat</span> ~/test.ll <span class="comment">#查看ll这个IR语言的 </span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%5 = add i32 %4, 2 #这个指令将两个32位整数相加（可以通过类型i32推断出来）。它将4号寄存器（写作%4）中的数和字面值2（写作2）求和，然后放到5号寄存器中。</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// dump()。它会打印出人可读的IR对象的表示。</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SkeletonPass</span> : <span class="keyword">public</span> PassInfoMixin&lt;SkeletonPass&gt; &#123;</span><br><span class="line">    <span class="function">PreservedAnalyses <span class="title">run</span><span class="params">(Module &amp;M, ModuleAnalysisManager &amp;AM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;F : M.<span class="built_in">functions</span>()) &#123;</span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;In a function called &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Function body:\n&quot;</span>;</span><br><span class="line">            F.<span class="built_in">print</span>(<span class="built_in">errs</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;B : F) &#123;</span><br><span class="line">              <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Basic block:\n&quot;</span>;</span><br><span class="line">              B.<span class="built_in">print</span>(<span class="built_in">errs</span>());</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;I : B) &#123;</span><br><span class="line">                <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Instruction: \n&quot;</span>;</span><br><span class="line">                I.<span class="built_in">print</span>(<span class="built_in">errs</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;I saw a function called &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">all</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> LLVM_ATTRIBUTE_WEAK ::<span class="function">llvm::PassPluginLibraryInfo</span></span><br><span class="line"><span class="function"><span class="title">llvmGetPassPluginInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        .APIVersion = LLVM_PLUGIN_API_VERSION,</span><br><span class="line">        .PluginName = <span class="string">&quot;Skeleton pass&quot;</span>,</span><br><span class="line">        .PluginVersion = <span class="string">&quot;v0.1&quot;</span>,</span><br><span class="line">        .RegisterPassBuilderCallbacks = [](PassBuilder &amp;PB) &#123;</span><br><span class="line">            PB.<span class="built_in">registerPipelineStartEPCallback</span>(</span><br><span class="line">                [](ModulePassManager &amp;MPM, OptimizationLevel Level) &#123;</span><br><span class="line">                    MPM.<span class="built_in">addPass</span>(<span class="built_in">SkeletonPass</span>());</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对一个运算符进行重新编写">对一个运算符进行重新编写</h3><p>把函数里第一个二元操作符（比如+，-）改成乘号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SkeletonPass</span> : <span class="keyword">public</span> PassInfoMixin&lt;SkeletonPass&gt; &#123;</span><br><span class="line">    <span class="function">PreservedAnalyses <span class="title">run</span><span class="params">(Module &amp;M, ModuleAnalysisManager &amp;AM)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;F : M.<span class="built_in">functions</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;B : F) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;I : B) &#123;</span><br><span class="line">                    <span class="comment">// dyn_cast&lt;T&gt;(p)构造函数是LLVM类型检查工具的应用。如果I不是“二元操作符”，这个构造函数返回一个空指针。</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">auto</span> *op = <span class="built_in">dyn_cast</span>&lt;BinaryOperator&gt;(&amp;I)) &#123;</span><br><span class="line">                        <span class="comment">// Insert at the point where the instruction `op`</span></span><br><span class="line">                        <span class="comment">// appears.</span></span><br><span class="line">                        <span class="comment">// IRBuilder用于构造代码。</span></span><br><span class="line">                        IRBuilder&lt;&gt; <span class="built_in">builder</span>(op);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Make a multiply with the same operands as `op`.</span></span><br><span class="line">                        Value *lhs = op-&gt;<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">                        Value *rhs = op-&gt;<span class="built_in">getOperand</span>(<span class="number">1</span>);</span><br><span class="line">                        Value *mul = builder.<span class="built_in">CreateMul</span>(lhs, rhs);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Everywhere the old instruction was used as an</span></span><br><span class="line">                        <span class="comment">// operand, use our new multiply instruction instead.</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;U : op-&gt;<span class="built_in">uses</span>()) &#123;</span><br><span class="line">                          <span class="comment">// A User is anything with operands.</span></span><br><span class="line">                          User *user = U.<span class="built_in">getUser</span>();</span><br><span class="line">                          user-&gt;<span class="built_in">setOperand</span>(U.<span class="built_in">getOperandNo</span>(), mul);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// We modified the code.</span></span><br><span class="line">                        <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">none</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">all</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> LLVM_ATTRIBUTE_WEAK ::<span class="function">llvm::PassPluginLibraryInfo</span></span><br><span class="line"><span class="function"><span class="title">llvmGetPassPluginInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        .APIVersion = LLVM_PLUGIN_API_VERSION,</span><br><span class="line">        .PluginName = <span class="string">&quot;Skeleton pass&quot;</span>,</span><br><span class="line">        .PluginVersion = <span class="string">&quot;v0.1&quot;</span>,</span><br><span class="line">        .RegisterPassBuilderCallbacks = [](PassBuilder &amp;PB) &#123;</span><br><span class="line">            PB.<span class="built_in">registerPipelineStartEPCallback</span>(</span><br><span class="line">                [](ModulePassManager &amp;MPM, OptimizationLevel Level) &#123;</span><br><span class="line">                    MPM.<span class="built_in">addPass</span>(<span class="built_in">SkeletonPass</span>());</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%i&quot;</span>, &amp;num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%i\n&quot;</span>, num + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">   $ cc example.c</span><br><span class="line">    $ ./a.out</span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">12</span></span><br><span class="line">    $ clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.so example.c</span><br><span class="line">    $ ./a.out</span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="llvm-tablegen-的入门">LLVM tablegen 的入门</h2><p>使用 LLVM 时，你会选择一个“目标”，即你想要为其生成指令的处理器体系结构。TableGen 的等效项是“后端”。这些后端不生成指令，而是输出特定于该后端用例的格式。 tablegen是llvm用于开发和维护编译器中公共特性的条目(e.g. 指令描述, 寄存器描述)的代码, ，其本质是一个parser, **说白了就是把一套公用的指令翻译成不同架构的语言，比如一个加法分别翻译成x86、arm的，**<strong>将输入的td文件转化为特定的数据结构后再输出为易于阅读的cpp代码，实现td文件到cpp代码</strong></p><p><img src="./LLVM-tablegen/0d726f2066052217c46a74cecf86b90f.png" alt="img"></p><h3 id="使用方式">使用方式</h3><p>在llvm下载目录里/bin/可执行文件中有一个llvm-tblgen工具，读入一个td文件, 并将结果输出至一个inc文件中，生成的inc文件实质为cpp代码,</p><p>tablegen代码包含两块:</p><ul><li>对td文件的处理, 在lib/TableGen/目录下, 包含lexer与parser,  负责解析tablegen的语法并转换为内部数据结构;</li><li>输出cpp代码, 在utils/TableGen/目录下, 用于生成我们需要的cpp代码, 这块与llvm代码逻辑强相关, 基本上一个cpp文件对应一类信息.</li></ul><h3 id="td文件的语法">td文件的语法</h3><p>TableGen的语法与C++相似，具有内置类型和规范。此外，TableGen的语法还引入了一些自动化概念，如multiclass、foreach、let等在td中使用两个关键字定义数据结构：</p><p>class与def，这两个在llvm中被称为records，下面分别介绍</p><ul><li>classes类似于模板, 用于描述一类抽象的records，<strong>说白了就是那个公用的指令是什么</strong></li><li>definitions用于表达一个具体的records(可以理解为一个特定的类)，<strong>说白了就是这个公用的指令在特定平台是怎么写的</strong><ul><li>每个records包含若干数据成员, 这些成员的类型有bit(布尔量), int(整型), string(字符串), code(代码段,  包含一行或多行的字符串), bit(位段)等类型.</li><li>数据成员使用let关键字进行赋值,</li><li>对于tablegen中解析的成员必须都初始化(为定义的值可以使用?初始化为’未初始化值’), 否则会导致编译失败. 若一个definition  record包含一个未初始化成员, 其值将从该definition的superclass中获取.  若tablegen中未解析该成员则不赋值也不会报错.</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 以下是class，是一个比如在x86,arm，acend都会用到的一个指令</span><br><span class="line">class AsmParser &#123;</span><br><span class="line">  string AsmParserClassName  = &quot;AsmParser&quot;;</span><br><span class="line">  string AsmParserInstCleanup  = &quot;&quot;;</span><br><span class="line">  bit ShouldEmitMatchRegisterName = 1;</span><br><span class="line">  bit ShouldEmitMatchRegisterAltName = 0;</span><br><span class="line">  bit AllowDuplicateRegisterNames = 0;</span><br><span class="line">  bit HasMnemonicFirst = 1;</span><br><span class="line">  bit ReportMultipleNearMisses = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Hexagon架构的Asmarser，然后在高通架构下对上面的class重新写，因为在不同的后端比如x86,arm，acend，他们的指令操作码不一样</span><br><span class="line">// Hexagon架构的Asmarser如下(defined in lib/Target/Hexagon/Hexagon.td):</span><br><span class="line">def HexagonAsmParser : AsmParser &#123;</span><br><span class="line">  // 使用`let`作为赋值语句。</span><br><span class="line">  let ShouldEmitMatchRegisterAltName = 1;</span><br><span class="line">  bit HasMnemonicFirst = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-tblgen test.td # 命令行中运行,在默认参数下会输出所有的class和defs。在每条记录定义后的注释表明了ADD所有的类别。</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 再举一个例子</span></span><br><span class="line"><span class="comment">// cat register.td</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Register</span>&lt;<span class="type">int</span> _size, string _alias=<span class="string">&quot;&quot;</span>&gt; &#123;</span><br><span class="line">  <span class="type">int</span> size = _size;</span><br><span class="line">  string alias = _alias;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 64 bit general purpose registers are X&lt;N&gt;.</span></span><br><span class="line">def X0: Register&lt;<span class="number">8</span>&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// Some have special alternate names.</span></span><br><span class="line">def X29: Register&lt;<span class="number">8</span>, <span class="string">&quot;frame pointer&quot;</span>&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// Some registers omitted...</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">执行tablegen命令./bin/llvm-tblgen register.td</span><br><span class="line"></span><br><span class="line">------------- Classes -----------------</span><br><span class="line">class Register&lt;int Register:_size = ?, string Register:_alias = <span class="string">&quot;&quot;</span>&gt; &#123;</span><br><span class="line"> int size = Register:_size;</span><br><span class="line"> string <span class="built_in">alias</span> = Register:_alias;</span><br><span class="line">&#125;</span><br><span class="line">------------- Defs -----------------</span><br><span class="line">def X0 &#123;        // Register</span><br><span class="line"> int size = 8;</span><br><span class="line"> string <span class="built_in">alias</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">def X29 &#123;       // Register</span><br><span class="line"> int size = 8;</span><br><span class="line"> string <span class="built_in">alias</span> = <span class="string">&quot;frame pointer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;LLVM和LLVM tablegen学习笔记&lt;/h1&gt;
&lt;h2 id=&quot;llvm介绍&quot;&gt;LLVM介绍&lt;/h2&gt;
&lt;p&gt;LLVM 是一个跨平台（可在 Linux、Windows 和 Mac 上使用）C/C++ 编译器工具集，像 GCC一样。 LLVM 可以编译用  C、C+</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大恒相机硬触发</title>
    <link href="http://outbreak-sen.github.io/2025/02/11/%E5%A4%A7%E6%81%92%E7%9B%B8%E6%9C%BA%E7%A1%AC%E8%A7%A6%E5%8F%91/"/>
    <id>http://outbreak-sen.github.io/2025/02/11/%E5%A4%A7%E6%81%92%E7%9B%B8%E6%9C%BA%E7%A1%AC%E8%A7%A6%E5%8F%91/</id>
    <published>2025-02-11T01:51:43.000Z</published>
    <updated>2025-02-11T02:17:00.136Z</updated>
    
    <content type="html"><![CDATA[<h1>大恒相机硬触发说明文档</h1><p>相机硬触发是区别于软触发，利用IO或者光耦等外部控制信号触发相机快门的技术。</p><p>大恒相机有IO触发和光耦触发两种硬触发方式，其中光耦触发隔离了光电回路，对于相机更加安全，但是由于存在光电转换过程所以触发时间延迟了30us左右。硬触发方式只有单次触发，也就是说想要连续获得图片必须向相机发射多次发射方波信号。</p><p><strong>硬触发只能通过回调函数获得图片，对于大恒相机只能通过已经定义的回调函数获得图片，回调的数据类型已经确定。</strong></p><h2 id="利用io信号控制相机硬触发">利用IO信号控制相机硬触发</h2><p>在IO控制线中有line0，line1，line2，line3三根线，前两根是光耦触发线，后两根是IO输入/输出线。注意使用IO控制时还应连接IO地线GND。</p><p><img src="./%E5%A4%A7%E6%81%92%E7%9B%B8%E6%9C%BA%E7%A1%AC%E8%A7%A6%E5%8F%91/1.png" alt=""></p><p><strong>这里我接了line2（5）和GND（2）然后line2接到一个单片机上的GPIO口上，推挽输出，输出电压为5V，然后完成以下设置之后，只要单片机的IO口输出一个高电平，相机就会采集一张图片。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">````</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;time.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GxIAPI.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量，用来存图和计时</span></span><br><span class="line"><span class="function">cv::Mat <span class="title">empty</span><span class="params">(<span class="number">1024</span>, <span class="number">1280</span>, CV_8UC3, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line">timeval tv;</span><br><span class="line"><span class="type">long</span> time_end;</span><br><span class="line"><span class="type">long</span> time_start;</span><br><span class="line"><span class="comment">//图 像 回 调 处 理 函 数</span></span><br><span class="line"><span class="comment">//传回来的GX_FRAME_CALLBACK_PARAM *pFrame包含了图像所在指针，大小，长度等一系列信息，需要解码之后变成RGB图片</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> GX_STDC <span class="title">OnFrameCallbackFun</span><span class="params">(GX_FRAME_CALLBACK_PARAM *pFrame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (pFrame-&gt;status == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">      time_end = tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</span><br><span class="line">      std::cout &lt;&lt; <span class="number">1000000</span> / (time_end - time_start) &lt;&lt; <span class="string">&quot;fps&quot;</span></span><br><span class="line">                &lt;&lt; <span class="string">&quot;get an image&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">      time_start = time_end;</span><br><span class="line">      <span class="type">void</span> *rgb_buffer = <span class="built_in">malloc</span>(<span class="number">3</span> * pFrame-&gt;nImgSize);</span><br><span class="line">      <span class="built_in">DxRaw8toRGB24</span>((<span class="type">void</span> *)pFrame-&gt;pImgBuf, rgb_buffer, pFrame-&gt;nWidth, pFrame-&gt;nHeight, RAW2RGB_NEIGHBOUR, BAYERRG, <span class="literal">false</span>);</span><br><span class="line">      cv::Mat result = cv::<span class="built_in">Mat</span>(pFrame-&gt;nHeight, pFrame-&gt;nWidth, CV_8UC3, rgb_buffer);</span><br><span class="line">      result.<span class="built_in">copyTo</span>(empty);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;fuck,trigger is failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开设备和打开库方式相同，关键在于设置触发</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   GX_STATUS status = GX_STATUS_SUCCESS;</span><br><span class="line">   GX_DEV_HANDLE hDevice = <span class="literal">NULL</span>;</span><br><span class="line">   GX_OPEN_PARAM stOpenParam;</span><br><span class="line">   <span class="type">uint32_t</span> nDeviceNum = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">gettimeofday</span>(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">   time_end = tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</span><br><span class="line">   time_start = tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</span><br><span class="line">   <span class="comment">//初 始 化 库</span></span><br><span class="line">   status = <span class="built_in">GXInitLib</span>();</span><br><span class="line">   <span class="comment">//枚 举 设 备 列 表</span></span><br><span class="line">   status = <span class="built_in">GXUpdateDeviceList</span>(&amp;nDeviceNum, <span class="number">1000</span>);</span><br><span class="line">   <span class="keyword">if</span> ((status != GX_STATUS_SUCCESS) || (nDeviceNum &lt;= <span class="number">0</span>))</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//打 开 设 备</span></span><br><span class="line">   stOpenParam.accessMode = GX_ACCESS_EXCLUSIVE;</span><br><span class="line">   stOpenParam.openMode = GX_OPEN_INDEX;</span><br><span class="line">   stOpenParam.pszContent = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">   status = <span class="built_in">GXOpenDevice</span>(&amp;stOpenParam, &amp;hDevice);</span><br><span class="line">   <span class="keyword">if</span> (status == GX_STATUS_SUCCESS)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">//设 置 触 发 模 式 为 ON</span></span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_TRIGGER_MODE, GX_TRIGGER_MODE_ON);</span><br><span class="line">      <span class="comment">//设 置 触 发 激 活 方 式 为 上 升 沿，还可以设置下降沿触发，指电平上升或下降时为一次触发</span></span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_TRIGGER_ACTIVATION, GX_TRIGGER_ACTIVATION_RISINGEDGE);</span><br><span class="line">      <span class="comment">//设置触发开关为line2</span></span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_TRIGGER_SOURCE, GX_TRIGGER_SOURCE_LINE2);</span><br><span class="line">      <span class="comment">//Selects the physical line (or pin) of the external device connector to configure，我也不知道是啥反正加去了</span></span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_LINE_SELECTOR, GX_ENUM_LINE_SELECTOR_LINE2);</span><br><span class="line">      <span class="comment">//设置line2模式为input，同样可以设置为outpot，则可以通过相机控制外部设备</span></span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_LINE_MODE, GX_ENUM_LINE_MODE_INPUT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// GX_ENUM_TRIGGER_MODE: 触发模式, 枚举值参考 GX_TRIGGER_MODE_ENTRY </span></span><br><span class="line">      <span class="comment">// GX_COMMAND_TRIGGER_SOFTWARE : 软触发命令 </span></span><br><span class="line">      <span class="comment">// GX_ENUM_TRIGGER_ACTIVATION : 触发极性, 枚举值参考 </span></span><br><span class="line">      <span class="comment">// GX_TRIGGER_ACTIVATION_ENTRY GX_ENUM_TRIGGER_SWITCH : 外触发开关, 参考 </span></span><br><span class="line">      <span class="comment">// GX_TRIGGER_SWITCH_ENTRY GX_ENUM_TRIGGER_SOURCE : 触发源, 枚举值参考 </span></span><br><span class="line">      <span class="comment">// GX_TRIGGER_SOURCE_ENTRY GX_ENUM_TRIGGER_SELECTOR : 触发类型选择, 参考 </span></span><br><span class="line">      <span class="comment">// GX_TRIGGER_SELECTOR_ENTRY GX_FLOAT_TRIGGER_DELAY : 触发延迟</span></span><br><span class="line">      <span class="comment">//设置曝光和增益等参数和原先在一致</span></span><br><span class="line">      status = <span class="built_in">GXSetFloat</span>(hDevice, GX_FLOAT_EXPOSURE_TIME, (<span class="type">float</span>)<span class="number">3000</span>);</span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_BALANCE_RATIO_SELECTOR, GX_BALANCE_RATIO_SELECTOR_RED);</span><br><span class="line">      status = <span class="built_in">GXSetFloat</span>(hDevice, GX_FLOAT_BALANCE_RATIO, <span class="number">1.6484</span>);</span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_BALANCE_RATIO_SELECTOR, GX_BALANCE_RATIO_SELECTOR_BLUE);</span><br><span class="line">      status = <span class="built_in">GXSetFloat</span>(hDevice, GX_FLOAT_BALANCE_RATIO, <span class="number">1.5664</span>);</span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_BALANCE_RATIO_SELECTOR, GX_BALANCE_RATIO_SELECTOR_GREEN);</span><br><span class="line">      status = <span class="built_in">GXSetFloat</span>(hDevice, GX_FLOAT_BALANCE_RATIO, <span class="number">1.000</span>);</span><br><span class="line">      status = <span class="built_in">GXSetEnum</span>(hDevice, GX_ENUM_GAIN_SELECTOR, GX_GAIN_SELECTOR_ALL);</span><br><span class="line">      status = <span class="built_in">GXSetFloat</span>(hDevice, GX_FLOAT_GAIN, <span class="number">10.0</span>);</span><br><span class="line">  <span class="comment">//注 册 图 像 处 理 回 调 函 数，每次接受到一个电平变化就会回调</span></span><br><span class="line">      status = <span class="built_in">GXRegisterCaptureCallback</span>(hDevice, <span class="literal">NULL</span>, OnFrameCallbackFun);   </span><br><span class="line">      <span class="comment">//发 送 开 采 命 令</span></span><br><span class="line">      status = <span class="built_in">GXSendCommand</span>(hDevice, GX_COMMAND_ACQUISITION_START);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//所有引脚状态</span></span><br><span class="line">   <span class="type">int64_t</span> nAllLineStatus = <span class="number">0</span>; </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      cv::<span class="built_in">imshow</span>(<span class="string">&quot;test&quot;</span>, empty);</span><br><span class="line">      <span class="keyword">if</span> (cv::<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cv::<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//输出所有引脚的电平，0xc默认是未触发状态，但是实际上0xe是未触发</span></span><br><span class="line">         GX_STATUS Status = <span class="built_in">GXGetInt</span>(hDevice, GX_INT_LINE_STATUS_ALL, &amp;nAllLineStatus);</span><br><span class="line">         std::cout</span><br><span class="line">             &lt;&lt; <span class="string">&quot;line status:&quot;</span> &lt;&lt; nAllLineStatus &lt;&lt; std::endl; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cv::<span class="built_in">waitKey</span>(<span class="number">1</span>) == <span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">//在 发 送 停 采 命 令 前 如 果 产 生 了 有 效 触 发 , 那 么 图 像</span></span><br><span class="line">         <span class="comment">//会 通 过 OnFrameCallbackFun 接 口 返 给 用 户</span></span><br><span class="line">         <span class="comment">//---------------------</span></span><br><span class="line">         <span class="comment">//发 送 停 采 命 令</span></span><br><span class="line">         status = <span class="built_in">GXSendCommand</span>(hDevice, GX_COMMAND_ACQUISITION_STOP);</span><br><span class="line">         <span class="comment">//注 销 采 集 回 调</span></span><br><span class="line">         status = <span class="built_in">GXUnregisterCaptureCallback</span>(hDevice);</span><br><span class="line">         status = <span class="built_in">GXCloseDevice</span>(hDevice);</span><br><span class="line">         hDevice = <span class="literal">NULL</span>;</span><br><span class="line">         status = <span class="built_in">GXCloseLib</span>();</span><br><span class="line">         std::cout &lt;&lt; <span class="string">&quot;end captrue&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="io控制的电控代码">IO控制的电控代码</h2><p>我设计的电控方案是摁一下摁建就会有回调函数触发，回调函数就会展示这张照片，如果没有摁摁建就不会有图片，不会触发。如有需要可以联系我</p><p>设置曝光为3000us，查看大恒的图像传输过程大概是300us，取一次传图的周期为5000us，即200hz，则也应设置电控发送200hz的IO变化电平，实际在视觉收到的图片速率也在200hz作有，有不到10hz的变化，这个挺简单的，我就不切系统复制电控的代码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;大恒相机硬触发说明文档&lt;/h1&gt;
&lt;p&gt;相机硬触发是区别于软触发，利用IO或者光耦等外部控制信号触发相机快门的技术。&lt;/p&gt;
&lt;p&gt;大恒相机有IO触发和光耦触发两种硬触发方式，其中光耦触发隔离了光电回路，对于相机更加安全，但是由于存在光电转换过程所以触发时间延迟了30us</summary>
      
    
    
    
    <category term="相机驱动开发" scheme="http://outbreak-sen.github.io/categories/%E7%9B%B8%E6%9C%BA%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="大恒" scheme="http://outbreak-sen.github.io/tags/%E5%A4%A7%E6%81%92/"/>
    
    <category term="硬触发" scheme="http://outbreak-sen.github.io/tags/%E7%A1%AC%E8%A7%A6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Mindspore实习-AKG SIG算子addlayernorm编辑和合并</title>
    <link href="http://outbreak-sen.github.io/2025/02/10/Mindspore%E5%AE%9E%E4%B9%A0-AKG%20SIG%E7%AE%97%E5%AD%90addlayernorm%E7%BC%96%E8%BE%91%E5%92%8C%E5%90%88%E5%B9%B6/"/>
    <id>http://outbreak-sen.github.io/2025/02/10/Mindspore%E5%AE%9E%E4%B9%A0-AKG%20SIG%E7%AE%97%E5%AD%90addlayernorm%E7%BC%96%E8%BE%91%E5%92%8C%E5%90%88%E5%B9%B6/</id>
    <published>2025-02-10T04:53:11.000Z</published>
    <updated>2025-02-11T10:30:49.657Z</updated>
    
    <content type="html"><![CDATA[<h1>Mindspore实习-AKG SIG算子addlayernorm编辑和合并</h1><h2 id="什么是算子">什么是算子</h2><p>计算图和算子在计算本质上是一致的。<strong>算子是打包后的计算图，计算图是拆包后的算子</strong></p><p>比如sigmod复合算子可以看作一个计算图，由基础算子Exp，Add，Reciprocal等基础算子组成，用小规模的“基本算子”集合就可以表达任意现有计算图。</p><p>计算图可以完全由基础算子组成，但是还是得定义复合算子，比如sigmod这种，因为对于基本算子计算图来说，相邻算子之间只能通过全局内存（或显存）进行数据传递。而对于复合算子来说，相邻的基本计算之间则可以通过局部内存或者寄存器进行数据传递。除了性能之外，在一些场景下，通过算子融合也能有效减少对全局内存的的实际占用。</p><h1>mindspore的算子融合方案是什么</h1><p>在TVM、XLA等自动算子编译技术出现之前，AI框架主流采用手工融合的方式解决如上问题。主要思路是：</p><ul><li><p>手工融合: 1）识别常见的热点算子组合子图，比如： Add(Mul(x, y))。然后针对该算子子图手工实现对应融合算子； 2）将融合算子注册到AI框架，并在AI框架中增加对应的优化pass，将匹配的算子子图替换为融合算子节点。 这种方式的缺点是显而易见的。因为它只能针对若干热点场景进行融合，所以是无法做到通用和泛化的。</p></li><li><p>XLA：XLA最早基于TensorFlow开发。不过它采用了与TensorFlow不同的计算图IR表示。所以在TensorFlow中，需要将TensorFlow的计算图IR首先转换为XLA的计算图IR（HLO）。然后XLA基于HLO进行融合优化等，最后通过LLVM等后端编译生成相应融合算子。由于采用独立的IR，XLA具有较好的可移植性，目前在PyTorch、JAX等非TensorFlow框架中也有不错的表现。</p></li><li><p>TVM：TVM主要用于推理场景。在架构上，主要包括relay和tir两层。其通过relay导入推理模型，然后进行融合优化，最后通过tir生成融合算子。TVM在算子编译方面采用compute和schedule分离的技术，并且不同算子compute所需要的schedule通常是不同的。为了更好支持不同融合算子场景，TVM支持对算子进行自动tuning，来生成较优的切分参数甚至schedule。由于tuning空间较大，目前tuning时间相对还是比较长的。</p></li></ul><p>基于以上问题背景，并结合MindSpore自身需求，我们提出图算融合解决方案。其主要思路是：</p><ul><li>图算融合解决方案: 1）3.9以通用的pattern识别计算图中的融合场景，并生成融合算子子图；2）将生成的融合算子子图通过自动算子编译技术（AKG）生成对应的融合算子。</li></ul><h2 id="什么是图算融合编译技术">什么是图算融合编译技术</h2><p>我们如果需要把模型部署到CPU甚至手机上去，此时需要其他硬件及其架构的支持。开发者们往往会根据实际情况选择各种各样的深度学习顶层框架训练模型，例如昇思MindSpore等，再把训练好的模型部署到各种各样的设备后端包括GPU、CPU、FPGA、昇腾AI处理器及其它新型的AI加速器上。</p><p>考虑到不同硬件设备的特性千差万别、现有算子库中算子包含范围不同、新型加速器算子库支持不足、非常规的神经网络中存在不常见的layer等等情况，开发者要完成手写算子并保证性能，学习成本和时间成本都变得很高，所以图算融合编译技术的出现变得非常有必要。</p><p><a href="https://www.mindspore.cn/docs/programming_guide/zh-CN/r1.6/graph_kernel_fusion.html">这里有一个介绍</a></p><h2 id="什么是自动算子编译技术akg">什么是自动算子编译技术AKG</h2><p>AKG是Auto Kernel Generator的简称，&quot;SIG&quot;是一个常见的缩写，全称为 “Special Interest Group”，中文直译为“特殊兴趣小组”或者”特殊利益集团“。</p><p>AKG(Auto Kernel Generator)对深度神经网络中的算子进行优化，并提供特定模式下的算子自动融合功能。AKG与MindSpore的图算融合功能协同工作，可提升在不同硬件后端上运行网络的性能。AKG基于polyhedral技术，多面体。</p><h1>任务-addlayernorm</h1><p>【任务背景】<br>AKG-MLIR 已经在 MindSpore Dialect 内提供了基础算子的定义和对应的Lower流程。但是，当前MindSpore  Dialect算子集是基于传统的Bert/Transformer类网络的需求梳理和统计的。随着网络的变化，我们有更多算子的需求希望添加在  MindSpore Dialect 之中。</p><p>【需求描述】</p><ol><li>在MindSporeOps.td中添加对应算子的实现</li><li>打通算子的Lower流程(直接lower到Linalg或者lower到TOSA)，相关Dialect的代码（如MindSporeToTosa.cpp或者MindSporeToLinalg.cpp）</li><li>提供对应的测试用例（算子的info文件和对应的op_dsl）</li></ol><p>【参考资料】</p><ol><li>样例代码仓:<a href="https://gitee.com/mindspore/akg/pulls/989">https://gitee.com/mindspore/akg/pulls/989</a></li><li>代码添加教程wiki:<a href="https://gitee.com/monkeykingd/akg/wikis/AKG-MLIR%E7%AE%97%E5%AD%90%E6%B7%BB%E5%8A%A0%E7%94%A8%E4%BE%8B">https://gitee.com/monkeykingd/akg/wikis/AKG-MLIR算子添加用例</a></li><li>测试用例教程wiki:<a href="https://gitee.com/monkeykingd/akg/wikis/AKG-MLIR%E5%8D%95%E7%AE%97%E5%AD%90%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%9E%84%E5%BB%BA">https://gitee.com/monkeykingd/akg/wikis/AKG-MLIR单算子测试用例构建</a></li></ol><p>【验收标准】<br>根据参考资料中的参考测试文件(<a href="http://demo.info">demo.info</a>)构建测试用例，使用python  ${path_to_py_benchmark}/py_benchmark.py -e cpu -f <a href="http://mul.info">mul.info</a> --dump_ir  1运行命令，和numpy模拟的算子结果一致</p><p>【任务技术要求】<br>Python, MindSpore &gt; 2.3</p><p>我要做什么？<br>把mindspore的AKG安装起来然后根据参考资料里的，利用基础算子写addlayernorm这个算子的实现然后添加lower流程然后再写一个测试示例，把整个代码push上去，让导师通过。</p><h1>AKG安装</h1><p>官方文档里写了从MindSpore侧构建运行AKG代码但是详细细节写了个寂寞，然后全是独立构建方法</p><p><a href="https://gitee.com/mindspore/akg#%E7%8B%AC%E7%AB%8B%E6%9E%84%E5%BB%BA">AKG安装过程</a></p><h2 id="从mindspore的whl安装-失败-但是后面还是这么做了">从mindspore的whl安装，失败，但是后面还是这么做了</h2><p>独立构建方法网上有，我偏不用，看看这个从MindSpore侧怎么安装，理论上AKG是mindspore的子仓库应该是自动安装了。</p><ul><li><s>首先我创建一个一个python3.9 conda环境然后安装Mindspore2.3安装方法是下载whl包</s>，这个没有出现问题日</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mindspore-2.3.1-cp39-cp39-linux_x86_64.whl</span><br></pre></td></tr></table></figure><p>不过如果是实习的话，需要推自己的改动，那我岂不是最好git下载然后source安装mindspore，算了。<strong>后来发现确实是这样，因为这样找不到tests文件夹，就无法运行官方文档里面的设置环境变量和运行测试用例，想了一下还是进行源码安装，因为又可以看源码又可以安装环境</strong>但是后来</p><h2 id="从mindspore的源码安装">从mindspore的源码安装</h2><p>我选择安装的是CPU的ubuntu x86架构的源码，参考mindspore的仓库主页<a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md">CPU安装源码</a></p><p>首先安装以下依赖软件，我的麻</p><table><thead><tr><th>软件名称</th><th>版本</th><th>作用</th></tr></thead><tbody><tr><td>Ubuntu</td><td>18.04</td><td>编译和运行MindSpore的操作系统</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85python">Python</a></td><td>3.9-3.11</td><td>MindSpore的使用依赖Python环境</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85wheel-setuptools-pyyaml%E5%92%8Cnumpy">wheel</a></td><td>0.32.0及以上</td><td>MindSpore使用的Python打包工具</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85wheel-setuptools-pyyaml%E5%92%8Cnumpy">setuptools</a></td><td>44.0及以上</td><td>MindSpore使用的Python包管理工具</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85wheel-setuptools-pyyaml%E5%92%8Cnumpy">PyYAML</a></td><td>6.0-6.0.2</td><td>MindSpore里的算子编译功能依赖PyYAML模块</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85wheel-setuptools-pyyaml%E5%92%8Cnumpy">Numpy</a></td><td>1.19.3-1.26.4</td><td>MindSpore里的Numpy相关功能依赖Numpy模块</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85gcc-git-tclsh-patch%E5%92%8Cnuma">GCC</a></td><td>7.3.0到9.4.0之间</td><td>用于编译MindSpore的C++编译器</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85gcc-git-tclsh-patch%E5%92%8Cnuma">git</a></td><td>-</td><td>MindSpore使用的源代码管理工具</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85cmake">CMake</a></td><td>3.22.2及以上</td><td>编译构建MindSpore的工具</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85gcc-git-tclsh-patch%E5%92%8Cnuma">tclsh</a></td><td>-</td><td>MindSpore sqlite编译依赖</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85gcc-git-tclsh-patch%E5%92%8Cnuma">patch</a></td><td>2.5及以上</td><td>MindSpore使用的源代码补丁工具</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85gcc-git-tclsh-patch%E5%92%8Cnuma">NUMA</a></td><td>2.0.11及以上</td><td>MindSpore使用的非一致性内存访问库</td></tr><tr><td><a href="https://gitee.com/mindspore/docs/blob/master/install/mindspore_cpu_install_source.md#%E5%AE%89%E8%A3%85llvm-%E5%8F%AF%E9%80%89">LLVM</a></td><td>12.0.1</td><td>MindSpore使用的编译器框架（可选，图算融合以及稀疏计算需要）</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以上依赖的安装过程</span></span><br><span class="line">conda create -n mindspore39AKGSource python=3.9</span><br><span class="line">pip install wheel</span><br><span class="line">pip install -U setuptools</span><br><span class="line">pip install pyyaml</span><br><span class="line">pip install <span class="string">&quot;numpy&gt;=1.19.3,&lt;=1.26.4&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install gcc-7 git tcl patch libnuma-dev -y <span class="comment"># 发现都安装了</span></span><br><span class="line"><span class="comment"># cmake已经安装了，但是发现了一个apt安装cmake的方法如下</span></span><br><span class="line">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">sudo</span> apt-add-repository <span class="string">&quot;deb https://apt.kitware.com/ubuntu/ <span class="subst">$(lsb_release -cs)</span> main&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install cmake -y</span><br><span class="line"><span class="comment"># # 以上依赖中的LLVM的安装过程，安装LLVM是可选的，但是我不知道哪里可选</span></span><br><span class="line">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install llvm-12-dev -y</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译安装mindspore 2.3.1 </span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mindspore/mindspore.git</span><br><span class="line">git checkout  v2.3.1 <span class="comment">#要更换版本，但是后来想了一下好像也没必要</span></span><br><span class="line">bash build.sh -e cpu -j4 -S on <span class="comment"># 默认从github下载依赖源码，当-S选项设置为on时，从对应的gitee镜像下载。这一步只是编译成whl，要安装还得install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错了configure: WARNING: *** Could not find Flex on your system</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install flex </span><br><span class="line"><span class="built_in">sudo</span> apt-get install bison </span><br><span class="line"><span class="comment">#又报错了PYTHON_INCLUDE_DIRS = /usr/include/python3.10 PYTHON_LIBRARIES = /usr/lib/x86_64-linux-gnu/libpython3.10.so MS LIBS CACHE PATH:  /home/outbreak/mindspore/AKG/mindspore/build/mindspore/.mslib</span></span><br><span class="line"><span class="comment">#CMake Error at cmake/gencode.cmake:13 (message):Generate operator python/c++ definitions FAILED.</span></span><br><span class="line"><span class="comment"># 然后这个报错我解决不了，艘不到也看不懂</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是我突然想到，这一步不就是生成whl的吗，所以我干脆只下载源码但是用网上编译好的whl算了，然后结合同一个版本的mindspore仓库进行编辑测试。后经过了测试，发现这样并不行，因为运行akg/test文件的时候并没有找到test_add.py，报错ERROR test_abs.py - RuntimeError: Cannot find the files.</span></span><br><span class="line"><span class="comment">#我觉得是我的whl安装过程并没有链接这个源码中的AKG的文件夹，我的猜测是这样的。所以最终怎么安装请看下面的最终解决方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果bash build.sh -e cpu -j4 -S on成功的话请继续</span></span><br><span class="line">pip install output/mindspore-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 这一步在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见setup.py中的required_package），其余情况需自行安装。运行模型时，需要根据ModelZoo中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考requirements.txt。</span></span><br><span class="line"><span class="comment"># 验证安装是否成功</span></span><br><span class="line">python -c <span class="string">&quot;import mindspore;mindspore.set_device(device_target=&#x27;CPU&#x27;);mindspore.run_check()&quot;</span></span><br><span class="line"><span class="comment"># 这一步应该会输出MindSpore version: 版本号</span></span><br><span class="line">The result of multiplication calculation is correct, MindSpore has been installed on platform [CPU] successfully!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最终的解决方案mindspore的whl安装-akg源码安装">最终的解决方案mindspore的whl安装+AKG源码安装</h2><p>ok fine ,最后终于成功了，整理一下思路，就是说从官网只下载AKG的源码，当然mindspore的仓库里有AKG这个子仓库，然后我用官方编译好的whl进行安装，安装版本为2.3.1，这个安装没有出现问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">conda create -n mindspore39NLP python=3.9</span><br><span class="line">pip install mindspore-2.3.1-cp39-cp39-linux_x86_64.whl <span class="comment">#这就安装完成了</span></span><br><span class="line"><span class="comment"># 以下为AKG的独立构建方式，针对CPU</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/mindspore/akg.git </span><br><span class="line"><span class="built_in">cd</span> akg</span><br><span class="line">bash build.sh -e cpu -j8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中途报错ModuleNotFoundError: No module named &#x27;decorator&#x27;</span></span><br><span class="line">pip install decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中途报错OSError: /home/outbreak/anaconda3/envs/mindspore39NLP/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.30&#x27; not found (required by /home/outbreak/mindspore/AKG/akg/build/libakg.so)</span></span><br><span class="line">strings /home/outbreak/anaconda3/envs/mindspore39NLP/lib/libstdc++.so.6  | grep GLIBC <span class="comment">#这个是查询当前的conda环境里有哪些stdc++，其中发现只有GLIBCXX_3.4.29，并没有GLIBCXX_3.4.30</span></span><br><span class="line">strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX <span class="comment">#这个是查询本地环境中有哪些stdc++，conda环境里某些包需要某个版本的c++，一般会从本地环境中复制进conda环境中，如果没有则报错，解决方法是链接进conda环境里</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /home/outbreak/anaconda3/envs/mindspore39NLP/bin/../lib/libstdc++.so.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> tests</span><br><span class="line"><span class="comment"># 设置环境变量，这里有很大的作用，source的位置一定要对，要不然找不到测试文件，卡bug</span></span><br><span class="line"><span class="built_in">source</span> ./test_env.sh cpu</span><br><span class="line"><span class="comment"># AKG测试</span></span><br><span class="line"><span class="built_in">cd</span> tests/st</span><br><span class="line">python run.py -e cpu -o add -l level0  <span class="comment"># 执行CPU Add算子的level0用例，包含了下面的test_abs</span></span><br><span class="line"><span class="built_in">cd</span> tests/st/ops/</span><br><span class="line">pytest -s test_abs.py -m <span class="string">&quot;level0 and platform_x86_cpu&quot;</span> <span class="comment"># 运行CPU level0测试用例</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>AddLayerNorm算子的定义</h1><p>首先addlayernorm的公式是怎样的，看一下pytorch没找到，但是找到了<a href="https://www.hiascend.com/document/detail/zh/canncommercial/80RC1/apiref/appdevgapi/context/aclnnAddLayerNorm.md">升腾的一个方案</a>。文献没有找到，但是在 Transformer 架构中，残差连接（Add）与层归一化（LayerNorm）常被结合使用，是将输入的X1和X2进行逐元素相加，然后对结果进行layernorm。LayerNorm 最初由 Jimmy Lei Ba 等人在 2016 年的论文 <strong>《Layer Normalization》</strong></p><p>![image-20250210193652012](./Mindspore实习-AKG SIG算子addlayernorm编辑和合并/2.png)</p><h1>任务1在MindSporeOps.td中添加对应算子的实现</h1><p>开头已经了解了mindspore AKG是什么了，里面提供了基本算子的定义和Lower流程，但现在需要添加新的复合算子AddLayerNorm到MindSpore Dialect中。</p><p>这里需要会LLVM编译器的相关操作，所谓td文件就是其中的编辑文件</p><ul><li><strong>TableGen</strong>是LLVM生态中用于生成代码的声明式语言，通过<code>.td</code>文件定义数据模型（如操作、指令、寄存器）。</li><li><strong>在MLIR中</strong>：td文件用于定义Dialect中的算子（Op）、类型（Type）、属性（Attribute）等，生成C++代码框架。</li></ul><p>如果要写一个addLaynorm，可能如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//有三个输入，一个输出，所以在这里定义了四个MindSpore_Tensor类型的tensor，对应五个输入X1、X2、gamma、beta和一个输出y。但是升腾的方案写的很复杂，还包括了是否要输出中间的相加结果</span><br><span class="line">// arguments：输入张量和属性（如epsilon）。</span><br><span class="line">// results：输出张量。</span><br><span class="line">// assemblyFormat：定义文本格式的语法，用于调试和序列化。</span><br><span class="line">// MindSporeOps.td中</span><br><span class="line">//===----------------------------------------------------------------------===//</span><br><span class="line">// MindSpore Operator: addlayernorm</span><br><span class="line">//===----------------------------------------------------------------------===//</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MindSpore_AddLayerNormOp</span> : MindSpore_Op&lt;<span class="string">&quot;addlayernorm&quot;</span>, [Pure]&gt; &#123;</span><br><span class="line">  let summary = <span class="string">&quot;Add followed by Layer Normalization&quot;</span>;</span><br><span class="line">  let arguments = (ins</span><br><span class="line">    MindSpore_Tensor:$input_a,</span><br><span class="line">    MindSpore_Tensor:$input_b,</span><br><span class="line">    MindSpore_Tensor:$input_gamma,</span><br><span class="line">    MindSpore_Tensor:$input_beta               </span><br><span class="line">  );</span><br><span class="line">  let results = (outs </span><br><span class="line">    MindSpore_Tensor:$output</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ins后接输入参数，out后接输出参数。在编译后会自动生成get方法来获取输入输出，并将蛇形名称转换为驼峰式命名法。在<code>akg-mlir/build/include/akg/Dialect/MindSpore/IR/MindSporeOps.cpp.inc</code>可以找到编译后的get方法</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">::mlir::TypedValue&lt;::mlir::TensorType&gt; AccMulOp::getInputA() &#123;</span><br><span class="line">  return *getODSOperands(0).begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::mlir::TypedValue&lt;::mlir::TensorType&gt; AccMulOp::getInputB() &#123;</span><br><span class="line">  return *getODSOperands(1).begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::mlir::TypedValue&lt;::mlir::TensorType&gt; AccMulOp::getInputGamma() &#123;</span><br><span class="line">  return *getODSOperands(2).begin();</span><br><span class="line">&#125;</span><br><span class="line">::mlir::TypedValue&lt;::mlir::TensorType&gt; AccMulOp::getInputBeta() &#123;</span><br><span class="line">  return *getODSOperands(2).begin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>任务2打通算子的Lower流程</h1><h2 id="lower流程讲解">Lower流程讲解</h2><p>直接lower到Linalg或者lower到TOSA，相关Dialect的代码（如MindSporeToTosa.cpp或者MindSporeToLinalg.cpp）</p><p>在MLIR（Multi-Level Intermediate Representation）生态中，<strong>Dialect</strong>、<strong>Linalg</strong> 和 <strong>TOSA</strong> 是不同层次的中间表示（IR），用于描述和优化计算任务。</p><ul><li><p>Dialect：是 MLIR 中的用于定义特定领域或抽象层次的中间表示。每个 Dialect 包含一组操作（Op）、类型（Type）和属性（Attribute），用于描述特定领域的计算任务。</p><p>例如：</p><ul><li><strong>MindSpore Dialect</strong>：描述 MindSpore 框架中的算子（如 <code>Add</code>、<code>LayerNorm</code>）。</li><li><strong>TOSA Dialect</strong>：描述面向硬件后端的张量运算操作。</li><li><strong>Linalg Dialect</strong>：描述线性代数操作（如矩阵乘法、卷积）。</li></ul></li><li><p>Linalg：是 MLIR 中的一个 Dialect，专注于<strong>线性代数操作</strong>（如矩阵乘法、卷积、点积等）。适合循环优化和高层次中间表示。</p></li><li><p>TOSA：全称<code>Tensor Operator Set Architecture</code>。里面都是张量运算，也就是比Linalg高了一个等级，它定义了一组硬件友好的操作，适合在 AI 加速器（如 NPU、GPU）上执行。适合面向硬件后端的标准化操作。在<code>Tosa</code>中已经定义有矩阵逐元素乘的实现，如下</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmlir.llvm.org%2Fdocs%2FDialects%2FTOSA%2F%23tosamul-mlirtosamulop"><code>tosa.mul</code> (mlir::tosa::MulOp)</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmlir.llvm.org%2Fdocs%2FDialects%2FTOSA%2F%23tosaadd-mlirtosaaddop"><code>tosa.add</code> (mlir::tosa::AddOp)</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmlir.llvm.org%2Fdocs%2FDialects%2FTOSA%2F%23tosapow-mlirtosapowop"><code>tosa.pow</code> (mlir::tosa::PowOp)</a></li></ul></li><li><p>Lower流程（Lowering）：是将高层抽象的 Dialect 逐步转换为低层抽象的 Dialect 的过程。（如从MindSpore Dialect到Linalg/TOSA）。</p><ul><li><strong>MindSpore Dialect 到 Linalg</strong>：将 MindSpore 的算子（如 <code>AddLayerNorm</code>）转换为 Linalg 的线性代数操作。将 <code>AddLayerNorm</code> 分解为 <code>linalg.add</code>、<code>linalg.mul</code> 等操作。</li><li><strong>MindSpore Dialect 到 TOSA</strong>：将 MindSpore 的算子转换为 TOSA 的标准化操作。将 <code>AddLayerNorm</code> 分解为 <code>tosa.add</code>、<code>tosa.mul</code> 等操作。</li></ul><p><strong>MindSpore的Lower过程这里有两条路，可以从MindSpore转到Tosa再转到Linalg，也可以直接从MindSpore转到Linalg</strong></p></li></ul><h2 id="编写addlayernorm的lower过程">编写AddLayerNorm的Lower过程</h2><p>参考的算子编写示例中讲解，测试的时候给算子输入的是JSON格式的文件，然后呢需要首先将JSON的格式转化为MindSpore Dialect 。</p><p>然后有两个路，一个是MindSpore Dialect 转化为Tosa  Dialect 再转化为Linalg Dialect ，另一个是MindSpore Dialect 直接转化为Linalg  Dialect。</p><h3 id="jsontomindspore">JSONtoMindSpore</h3><p>在<code>akg-mlir/compiler/lib/Target/MindsporeDialect/TranslateToMindsporeDialect.cpp</code>下的<code>void MindBuilder::initMindOpFactory()</code>中，case by case的注册刚写好的AddLayerNormOp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this-&gt;mindOpFactory[&quot;addlayernorm&quot;] = &amp;MindBuilder::convertTernaryOp&lt;mindspore::AddLayerNormOp&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mindsporetotosa">MindSporeToTosa</h3><p>首先这个是一个AccMulOp的范例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在MindSporeToTosa.cpp中</span></span><br><span class="line"><span class="comment">//这里写一个函数用来计算中间过程的输出尺度</span></span><br><span class="line"><span class="comment">//broadcast type</span></span><br><span class="line"><span class="function">SmallVector&lt;<span class="type">int64_t</span>&gt; <span class="title">broadcast</span><span class="params">(OpBuilder &amp;rewriter, Value M1, Value M2, Location loc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SmallVector&lt;<span class="type">int64_t</span>&gt; R1dim1;</span><br><span class="line">  <span class="comment">//shape</span></span><br><span class="line">  <span class="keyword">auto</span> M1Type = M<span class="number">1.</span><span class="built_in">getType</span>().<span class="built_in">dyn_cast</span>&lt;ShapedType&gt;();</span><br><span class="line">  <span class="keyword">auto</span> M2Type = M<span class="number">2.</span><span class="built_in">getType</span>().<span class="built_in">dyn_cast</span>&lt;ShapedType&gt;();</span><br><span class="line">  <span class="keyword">auto</span> shape1 = M1Type.<span class="built_in">getShape</span>();</span><br><span class="line">  <span class="keyword">auto</span> shape2 = M2Type.<span class="built_in">getShape</span>();</span><br><span class="line">  <span class="type">int64_t</span> R1dimi;</span><br><span class="line"><span class="comment">//broadcast</span></span><br><span class="line">  <span class="keyword">if</span> (shape<span class="number">1.</span><span class="built_in">size</span>() == shape<span class="number">2.</span><span class="built_in">size</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; shape<span class="number">1.</span><span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (shape1[i] == shape2[i])</span><br><span class="line">      &#123;</span><br><span class="line">        R1dimi = shape1[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (shape1[i] != <span class="number">1</span> &amp;&amp; shape2[i] != <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (shape1[i] == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        R1dimi = shape2[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (shape2[i] == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        R1dimi = shape1[i];</span><br><span class="line">      &#125;</span><br><span class="line">      R1dim<span class="number">1.</span><span class="built_in">push_back</span>(R1dimi);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> R1dim1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//AccMulOp——Result = Mul(Mul(Q, K), V)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccMulOpConverter</span> : <span class="keyword">public</span> OpConversionPattern&lt;mindspore::AccMulOp&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> OpConversionPattern&lt;mindspore::AccMulOp&gt;::OpConversionPattern;</span><br><span class="line">  <span class="function">LogicalResult <span class="title">matchAndRewrite</span><span class="params">(mindspore::AccMulOp mindsporeOp, AccMulOp::Adaptor adaptor, ConversionPatternRewriter &amp;rewriter)</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//Location</span></span><br><span class="line">    Location loc = mindsporeOp.<span class="built_in">getLoc</span>();</span><br><span class="line">    <span class="comment">//resultTypes </span></span><br><span class="line">    Type resultTypes = mindsporeOp.<span class="built_in">getResult</span>().<span class="built_in">getType</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Q = args[0], K = args[1], V = args[2]</span></span><br><span class="line">    ValueRange args = adaptor.<span class="built_in">getOperands</span>();</span><br><span class="line"></span><br><span class="line">    Type elemType = mindsporeOp.<span class="built_in">getResult</span>().<span class="built_in">getType</span>().<span class="built_in">cast</span>&lt;ShapedType&gt;().<span class="built_in">getElementType</span>();</span><br><span class="line"></span><br><span class="line">    SmallVector&lt;<span class="type">int64_t</span>&gt; result1 = <span class="built_in">broadcast</span>(rewriter, args[<span class="number">0</span>], args[<span class="number">1</span>], loc);</span><br><span class="line">    <span class="function">ArrayRef&lt;<span class="type">int64_t</span>&gt; <span class="title">newArrayRef</span><span class="params">(result1)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> Type1 = RankedTensorType::<span class="built_in">get</span>(newArrayRef, elemType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Q = args[0], K = args[1], V = args[2]</span></span><br><span class="line">    <span class="comment">//mulOp11 = Mul(Q，K)</span></span><br><span class="line">    Value mulOp11 = rewriter.<span class="built_in">create</span>&lt;mlir::tosa::MulOp&gt;(loc, Type1, args[<span class="number">0</span>], args[<span class="number">1</span>], <span class="number">0</span>)-&gt;<span class="built_in">getResult</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//Mul(mulOp11，V)</span></span><br><span class="line">    <span class="keyword">auto</span> mulOp2 = rewriter.<span class="built_in">create</span>&lt;mlir::tosa::MulOp&gt;(loc, resultTypes, mulOp11, args[<span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rewriter.<span class="built_in">replaceOp</span>(mindsporeOp, mulOp<span class="number">2.</span><span class="built_in">getResult</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">success</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再在<code>struct ConvertMindSporeToTosaPass : public ConvertMindSporeToTosaBase&lt;ConvertMindSporeToTosaPass&gt;</code>中添加patterns-AccMulOpConverter</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ConvertMindSporeToTosaPass</span> : <span class="keyword">public</span> ConvertMindSporeToTosaBase&lt;ConvertMindSporeToTosaPass&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">ConvertMindSporeToTosaPass</span>() = <span class="keyword">default</span>;</span><br><span class="line">...</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">runOnOperation</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// clang-format off</span></span><br><span class="line">         (<span class="type">void</span>)patterns.add&lt;</span><br><span class="line">        ...</span><br><span class="line">       <span class="comment">//AccMulOp</span></span><br><span class="line">        AccMulOpConverter,</span><br><span class="line">        ConvertMindSporePadOp&lt;mindspore::PadOp&gt;</span><br><span class="line">        &gt;(patterns.<span class="built_in">getContext</span>());</span><br><span class="line">        mlir::<span class="built_in">populateMindSporeLowerPattern</span>(patterns);</span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时，在<code>/akg-mlir/compiler/lib/Conversion/MindSporeToLinalg/MindSporeToLinalg.cpp</code>和<code>/akg-mlir/compiler/lib/Conversion/MindSporeFinalizingLower/MindSporeFinalizingLower.cpp</code>中对此算子添加了legal,通过手动添加legal，可以保证AccMul算子不在这里被lower，在此类转换中被保留</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void runOnOperation() override</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">//AccmulOp</span><br><span class="line">   target.addLegalOp&lt;mindspore::AccMulOp&gt;();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一个deepseek写的addlayernorm的方案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MindSporeToTosa.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ConvertAddLayerNormToTosa</span> : <span class="keyword">public</span> OpConversionPattern&lt;MindSpore::AddLayerNormOp&gt; &#123;</span><br><span class="line">  <span class="keyword">using</span> OpConversionPattern::OpConversionPattern;</span><br><span class="line">  </span><br><span class="line">  <span class="function">LogicalResult <span class="title">matchAndRewrite</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      MindSpore::AddLayerNormOp op,</span></span></span><br><span class="line"><span class="params"><span class="function">      OpAdaptor adaptor,</span></span></span><br><span class="line"><span class="params"><span class="function">      ConversionPatternRewriter &amp;rewriter</span></span></span><br><span class="line"><span class="params"><span class="function">  )</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取输入和属性</span></span><br><span class="line">    Value input = adaptor.<span class="built_in">getInput</span>();</span><br><span class="line">    Value gamma = adaptor.<span class="built_in">getGamma</span>();</span><br><span class="line">    Value beta = adaptor.<span class="built_in">getBeta</span>();</span><br><span class="line">    <span class="type">float</span> epsilon = op.<span class="built_in">getEpsilon</span>().<span class="built_in">convertToFloat</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将AddLayerNorm分解为TOSA操作：</span></span><br><span class="line">    <span class="comment">// 1. 计算输入均值（mean）</span></span><br><span class="line">    <span class="comment">// 2. 计算方差（variance）</span></span><br><span class="line">    <span class="comment">// 3. 执行归一化：(input - mean) / sqrt(variance + epsilon)</span></span><br><span class="line">    <span class="comment">// 4. 应用gamma和beta</span></span><br><span class="line">    <span class="comment">// 具体实现需调用TOSA的现有操作（如tosa.add, tosa.mul等）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 伪代码示例：</span></span><br><span class="line">    <span class="keyword">auto</span> mean = rewriter.<span class="built_in">create</span>&lt;tosa::ReduceMeanOp&gt;(...);</span><br><span class="line">    <span class="keyword">auto</span> variance = rewriter.<span class="built_in">create</span>&lt;tosa::SubOp&gt;(...);</span><br><span class="line">    <span class="keyword">auto</span> normalized = rewriter.<span class="built_in">create</span>&lt;tosa::DivOp&gt;(...);</span><br><span class="line">    <span class="keyword">auto</span> scaled = rewriter.<span class="built_in">create</span>&lt;tosa::MulOp&gt;(normalized, gamma);</span><br><span class="line">    <span class="keyword">auto</span> output = rewriter.<span class="built_in">create</span>&lt;tosa::AddOp&gt;(scaled, beta);</span><br><span class="line">    </span><br><span class="line">    rewriter.<span class="built_in">replaceOp</span>(op, output);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">success</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后要注册这个写好的pattern</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">populateMindSporeToTosaPatterns</span><span class="params">(MLIRContext *context, RewritePatternSet &amp;patterns)</span> </span>&#123;</span><br><span class="line">  patterns.<span class="built_in">add</span>&lt;ConvertAddLayerNormToTosa&gt;(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新Lower流程入口确保在Lower流程中调用上述Pattern：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LowerMindSporeToTosa</span><span class="params">(ModuleOp <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">  <span class="function">ConversionTarget <span class="title">target</span><span class="params">(*<span class="keyword">module</span>.getContext())</span></span>;</span><br><span class="line">  target.<span class="built_in">addLegalDialect</span>&lt;Tosa::TosaDialect&gt;();</span><br><span class="line">  target.<span class="built_in">addIllegalDialect</span>&lt;MindSpore::MindSporeDialect&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="function">RewritePatternSet <span class="title">patterns</span><span class="params">(&amp;getContext())</span></span>;</span><br><span class="line">  <span class="built_in">populateMindSporeToTosaPatterns</span>(patterns);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">failed</span>(<span class="built_in">applyPartialConversion</span>(<span class="keyword">module</span>, target, std::<span class="built_in">move</span>(patterns)))) &#123;</span><br><span class="line">    <span class="built_in">signalPassFailure</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mindsporetolinalg">MindsporetoLinalg</h3><p>利用Linalg <strong>在这一层并没有直接的矩阵乘加指令</strong>。但在<br><code>akg/akg-mlir/compiler/lib/Conversion/MindSporeToLinalg/MindSporeToLinalg.cpp</code><br>中有已经提供了写elementwise计算的方法，所以直接在<br><code>static Value createLinalgBodyCalculationForElementwiseOp(Operation *op, ValueRange args, ArrayRef&lt;Type&gt; resultTypes, PatternRewriter &amp;rewriter)</code>中添加对应逻辑，其中<a href="https://gitee.com/link?target=https%3A%2F%2Fmlir.llvm.org%2Fdocs%2FDialects%2FArithOps%2F">arith</a>旨在容纳基本的整数和浮点数学运算</p><p>同上的流程</p><ol><li>编写MindsporetoLinalg</li><li>然后编写一个pattern</li><li>还要在<code>akg-mlir/compiler/lib/Conversion/MindSporeToTosa/MindSporeToTosa.cpp</code>对此算子手动添加egal，保证AccMul算子不在这里被lower</li></ol><p>但是我具体没有搞明白</p><h1>任务3编写对应的测试用例（算子的info文件和对应的op_dsl）</h1><p><a href="https://gitee.com/monkeykingd/akg/wikis/AKG-MLIR%E5%8D%95%E7%AE%97%E5%AD%90%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%9E%84%E5%BB%BA">编写测试用例的参考资料</a></p><p>这里老师不仅讲了怎么写测试用例，还讲了怎么测试lower过程</p><p>测试的时候首先有一个正确结果benchmark，还有一个测试数据集，然后运行测试程序就可以把算子计算结果和正确结果进行对比</p><h3 id="benchmark构建">Benchmark构建</h3><p>用numpy验证计算的正确性</p><p>关benchmark记录在<code>akg-mlir/python/akg_v2/utils/op_dsl.py</code>中的<code>get_op_dsl()</code>函数中，每一个算子对应一个lambda函数作为dsl。以AccMul为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;AccMul&quot;: lambda inputs, output, attr: accmul_str(inputs, output, attr),</span><br></pre></td></tr></table></figure><p>对应的dsl为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def accmul_str(inputs, output, attr):</span><br><span class="line">    s=&quot;%s=np.multiply(np.multiply(%s,%s),%s)&quot;% ( output[0][&#x27;tensor_name&#x27;], get_input(inputs[0][0]),get_input(inputs[1][0]),get_input(inputs[2][0]))</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><p>这里指用np的multiply函数做计算。如果算子lower成功，期待的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Start running xxx</span><br><span class="line">xxxprecision correct</span><br></pre></td></tr></table></figure><h2 id="测试用例怎么写">测试用例怎么写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"># &quot;input_desc&quot;为一个list，里面包含了每个input的信息，包括data_type, format, shape和tensor_name，这个决定了融合算子的输入</span><br><span class="line">    &quot;input_desc&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                &quot;shape&quot;: [</span><br><span class="line">                    4096,</span><br><span class="line">                    7680</span><br><span class="line">                ],</span><br><span class="line">                &quot;tensor_name&quot;: &quot;Query&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                &quot;shape&quot;: [</span><br><span class="line">                    4096,</span><br><span class="line">                    7680</span><br><span class="line">                ],</span><br><span class="line">                &quot;tensor_name&quot;: &quot;Key&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                &quot;shape&quot;: [</span><br><span class="line">                    4096,</span><br><span class="line">                    7680</span><br><span class="line">                ],</span><br><span class="line">                &quot;tensor_name&quot;: &quot;Value&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    # &quot;op&quot;为整个融合算子的名字，对应到mlir文件的func的名字。</span><br><span class="line">    &quot;op&quot;: &quot;AccMulOp_fusion&quot;,</span><br><span class="line">    # &quot;output_desc&quot;为一个list，表示融合算子中每个单算子的名字，每一项表示每个算子的特点：</span><br><span class="line">    # attr：没有的时候要写成null</span><br><span class="line">    # input_desc：算子的输入，要求同上；</span><br><span class="line">    # name：算子的名字，必须和mindspore td内注册的算子对应；</span><br><span class="line">    # output_desc：算子的输入，要求同输入；值得注意的是，如果融合算子中一个算子的输入为前序算子的输出，tensor_name必须一致以获得对应关系；</span><br><span class="line">    &quot;op_desc&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;attr&quot;: null,</span><br><span class="line">            &quot;input_desc&quot;: [</span><br><span class="line">                [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                        &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                        &quot;name&quot;: &quot;Query&quot;,</span><br><span class="line">                        &quot;shape&quot;: [</span><br><span class="line">                            4096,</span><br><span class="line">                            7680</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;tensor_name&quot;: &quot;Query&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                        &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                        &quot;name&quot;: &quot;Key&quot;,</span><br><span class="line">                        &quot;shape&quot;: [</span><br><span class="line">                            4096,</span><br><span class="line">                            7680</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;tensor_name&quot;: &quot;Key&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                        &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                        &quot;name&quot;: &quot;Value&quot;,</span><br><span class="line">                        &quot;shape&quot;: [</span><br><span class="line">                            4096,</span><br><span class="line">                            7680</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;tensor_name&quot;: &quot;Value&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            &quot;name&quot;: &quot;AccMul&quot;,</span><br><span class="line">            &quot;output_desc&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">                    &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">                    &quot;name&quot;: &quot;output&quot;,</span><br><span class="line">                    &quot;shape&quot;: [</span><br><span class="line">                            4096,</span><br><span class="line">                            7680</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;tensor_name&quot;: &quot;output&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    # output_desc：整个融合算子的输出。</span><br><span class="line">    &quot;output_desc&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;data_type&quot;: &quot;float32&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;DefaultFormat&quot;,</span><br><span class="line">            &quot;shape&quot;: [</span><br><span class="line">                4096,</span><br><span class="line">                7680</span><br><span class="line">            ],</span><br><span class="line">            &quot;tensor_name&quot;: &quot;output&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    # 后面的不管</span><br><span class="line">    &quot;platform&quot;: &quot;AKG&quot;,</span><br><span class="line">    &quot;process&quot;: &quot;cpu&quot;,</span><br><span class="line">    &quot;target_info&quot;: &#123;</span><br><span class="line">        &quot;arch&quot;: &quot;aarch64&quot;,</span><br><span class="line">        &quot;feature&quot;: &quot;neon&quot;,</span><br><span class="line">        &quot;system&quot;: &quot;linux&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;version&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试文件构建完成之后，我们使用<code>python/akg_v2/exec_tools/</code>目录下<code>py_benchmark.py</code>进行测试，基本指令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python $&#123;path_to_py_benchmark&#125;/py_benchmark.py -e cpu -f mul.info --dump_ir 1</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>-e</code>决定了后端，这里使用cpu</li><li><code>-f</code>决定了测试文件，这里使用是<code>mul.info</code></li><li><code>--dump_ir 1</code>表示dump中间结果，相关结果保存在<code>py_benchmark.py</code>对应目录下</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Mindspore实习-AKG SIG算子addlayernorm编辑和合并&lt;/h1&gt;
&lt;h2 id=&quot;什么是算子&quot;&gt;什么是算子&lt;/h2&gt;
&lt;p&gt;计算图和算子在计算本质上是一致的。&lt;strong&gt;算子是打包后的计算图，计算图是拆包后的算子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://outbreak-sen.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GAN生成对抗模型" scheme="http://outbreak-sen.github.io/tags/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Mindspore" scheme="http://outbreak-sen.github.io/tags/Mindspore/"/>
    
    <category term="实习" scheme="http://outbreak-sen.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
    <category term="算子" scheme="http://outbreak-sen.github.io/tags/%E7%AE%97%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>EffiMVS全文翻译</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/EffiMVS%E5%85%A8%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/EffiMVS%E5%85%A8%E6%96%87%E7%BF%BB%E8%AF%91/</id>
    <published>2025-02-09T08:21:01.000Z</published>
    <updated>2025-02-09T08:21:48.232Z</updated>
    
    <content type="html"><![CDATA[<h1>Effi MVS翻译</h1><h2 id="摘要">摘要</h2><p>在本文中，我们提出了一种用于多视图立体的新颖的迭代动态成本量。 与其他作品相比，我们的成本量要轻得多，因此可以使用基于 2D 卷积的 GRU 进行处理。 值得注意的是，每一步GRU 的输出可进一步用于生成新的成本量。 这样，就构建了一个基于GRU的迭代优化器。 此外，我们提出了一种级联和分层细化架构来利用多尺度信息并加速收敛。 具体来说，利用轻量级 3D CNN 生成最粗糙的初始深度图，这对于启动 GRU 并保证快速收敛至关重要。 然后，深度图由作用于金字塔特征图的多级 GRU 进行细化。 对 DTU 和 Tanks &amp; Temples 基准测试的大量实验表明，我们的方法可以在准确性、速度和内存使用方面实现最先进的结果。</p><h2 id="介绍">介绍</h2><p>多视图立体 (MVS) 旨在基于一系列姿势图像和相应的相机参数重建密集的 3D 模型。 预测深度图，然后将深度图融合到点云模型中是 MVS 最常见的流程。 作为一个基本问题，MVS 在计算机视觉领域已经研究了几十年。</p><p>最近，我们见证了基于深度学习的 MVS 方法的快速发展。 一般来说，MVS任务最常见的基本结构是利用图像序列的特征来构造3D成本（相关）体积，然后用3D CNN对其进行正则化，最后对深度进行回归。 随之而来的还有大量作品管道，并且在 MVS 基准的重建精度方面优于大多数传统方法。然而，由于正则化步骤对 GPU 内存和处理时间的要求较高，现有方法CIDER, MVSNet只能处理低分辨率的图像。</p><p>显然，除了提高重建质量之外，减少运行时间和GPU内存消耗也非常重要，这使得基于学习的MVS工作能够适应内存和计算受限的设备。 最近，有人提出了一些工作来提高 MVS 的效率。 然而，同时提高精度和降低消耗仍然非常具有挑战性。 在这项工作中，我们的目标是提高高分辨率 MVS 的计算速度并减少内存消耗，并确保良好的重建质量。</p><p>我们方法的核心思想是构建一个可以迭代方式处理的轻量级动态成本量。 这一策略可以带来很多好处。 首先，由于使用了轻量级成本卷，大大降低了推理阶段的内存使用峰值。 其次，迭代和动态处理可以保证大的搜索空间，这对准确性很重要。 最后，我们的动态成本量能够在几个迭代步骤中收敛，因此我们的方法非常有效。</p><p>老实说，我们的方法部分受到[5,10,25,26]作品的启发。 在[5,10,25]的工作中，提出了级联自适应成本量。 相比之下，我们进一步缩小了成本量的大小，并将这种多阶段策略扩展到迭代方式。 我们的迭代想法也受到最近的光学估计工作的启发[26]。 与[26]相比，我们放弃了全尺寸静态相关卷，因为它对内存不友好。 更重要的是，与光流估计不同，我们利用轻量级 3D CNN 来估计粗略深度图作为 GRU 的初始化，我们发现这对于 GRU 在 MVS 上的快速收敛非常重要。 另外，由于3D CNN非常轻，对效率影响较小。 总之，我们的贡献可以总结为：</p><ol><li>我们提出了一种新颖的动态成本卷，它非常轻量级，可以通过基于 2D 卷积的 GRU 迭代处理。 这样我们就避免了大尺寸静态成本卷的内存和耗时问题。</li><li>我们提出了一种级联和分层细化架构来利用多尺度信息并加速收敛。 具体来说，通过轻量级 3DCNN，我们为 GRU 提供可靠的初始化，这对于快速收敛和最终性能至关重要。</li><li>我们的方法在准确性、推理速度和 GPU 内存消耗方面实现了最先进的性能（参见图 1）。 至于准确性，我们的方法在 DTU [1] 和 Tanks &amp; Temples 数据集 [13] 的高级序列上取得了最好的结果。 更重要的是，由于内存消耗较少，我们的方法比亚军快 2 倍。</li></ol><h2 id="2-相关工作">2.相关工作</h2><h3 id="2-1-传统-mvs-方法">2.1. 传统 MVS 方法</h3><p>传统的MVS方法大致可分为四类：基于体素的方法[24, 27]、基于表面的方法[7, 14]、基于块的方法[8, 16]和基于深度图的方法[9, 21, 30]。 在这些方法中，基于深度图的方法具有更好的灵活性和可扩展性。 Gipuma [9]提出了一种更适合并行计算的基于棋盘格的传播方案，并将PatchMatch [2]立体方法扩展到多视图立体。 COLMAP [21]通过联合估计像素级视图选择、深度图和表面法线来增强算法的鲁棒性。 ACMM [30]提出了一种具有自适应棋盘传播和多假设联合视图选择的多尺度 MVS 框架。 虽然这些方法可以获得鲁棒的3D重建结果，但它们存在计算要求高和重建质量差的问题。</p><p>2.2. 基于学习的 MVS 方法<br>最近，已经提出了大量基于深度学习的多视图立体工作[5,10,12,28,34-36]。 SurfaceNet[12]是早期的代表作品之一，它构建体素体来聚合多视图信息，并使用3D CNN对其进行正则化。 基于可微单应性 [6]，Yao 等人。 [35]提出了一种广泛使用的基于深度学习的MVS管道。 具体来说，MVSNet [35] 首先提取每个视图图像的特征图，然后构建一个成本卷，该成本卷基于一组深度假设聚合几何信息。 此外，通过 3D CNN 对成本量进行正则化，并通过回归策略预测最终深度。 然而，由于构建和正则化成本卷的内存使用量和计算要求较高，<br>MVSNet 只能处理低分辨率的图像。 为了减少内存消耗，R-MVSNet [36] 通过沿深度维度处理成本量，利用循环神经网络代替 3D CNN 正则化，这减少了内存需求，但增加了运行时间。 D2 HC-RMVSNet [33]提出了一种具有动态一致性检查的高效且有效的密集混合循环多视图立体网络。 AttMVS [18]提出了一种新颖的注意力增强匹配置信度和注意力引导正则化模块来提高匹配的鲁棒性。 Vis-MVSNet [38]通过匹配不确定性估计明确推断并集成了 MVS 网络中的像素级遮挡信息。 AA-RMVSnet [29]提出了一种自适应聚合模块，并利用具有循环结构的混合网络进行成本量正则化。</p><p>近年来，MVS的效率越来越受到人们的关注。 Fast-MVSNet [37]提出了一种新颖的从稀疏到密集从粗到细的框架，以实现快速准确的深度<br>MVS 中的估计。 通常，许多工作利用从粗到细的策略来减少内存消耗并提高准确性和速度[5,10,34]。 CVP-MVSNet [34]和CasMVSNet [10]基于金字塔特征图构建了级联成本卷。 UCS-Net [5]提出了一种利用不确定性估计来优化深度假设的策略。 值得注意的是，最近，Patchmatch-Net [28]将传统的 PatchMatch 算法引入深度学习框架，从而大大减少了运行时间和内存消耗。 与 PatchmatchNet 相比，我们的方法可以以更少的运行时间和内存消耗实现更好的重建质量。</p><h2 id="方法">方法</h2><p>如图 2 所示，我们的方法由多尺度特征提取器和基于 GRU 的优化器组成。 更具体地说，基于 GRU 的优化器包括动态成本量构造器和 GRU 模块。 与许多以前的工作不同，我们的动态成本量不仅可以聚合几何信息，还可以聚合上下文和深度信息。 更重要的是，它可以由 GRU 以迭代方式进行处理。 具体来说，在每个更新步骤中，我们首先构建一个建议的动态成本量，然后通过 GRU 更新深度图。 此外，我们提出了一种级联和分层细化架构来利用多尺度信息并加速收敛。 具体来说，利用轻量级 3D CNN 生成最粗糙的深度图，该深度图可用作下一个 GRU 的可靠初始化。 然后，深度图由作用于金字塔特征图的多级 GRU 进行细化。 值得注意的是，在每个阶段 k，给定初始深度图 Dk0，所提出的基于 GRU 的优化器可以迭代更新多次并输出最终深度图。 接下来，我们给出我们方法的更多细节。</p><h3 id="3-2-动态成本量">3.2. 动态成本量</h3><p>成本量在 MVS 问题中起着至关重要的作用。 如图3所示，与许多以前的工作中的静态成本量不同，我们聚合了几何特征、深度特征和上下文特征来构建我们的动态成本量。 分别从局部成本量、深度特征和参考图像中提取几何特征、深度特征和上下文特征。 更重要的是，受益于迭代策略，我们可以在狭窄的逆深度范围内更新深度假设，以在每次迭代中构造局部成本量，这使得我们的动态成本量与静态成本量相比要轻得多。</p><h4 id="3-2-1局部成本量">3.2.1局部成本量</h4><p>与之前的 MVS 工作[19,28,29,31]类似，给定参考视图的 D 深度假设 {dj |j = 1, …, D}，我们构造一个局部成本量来表示相关性 参考和源特征之间。 具体来说，对于参考视图中的每个像素 p，我们利用可微单应性通过将源特征 Fi 扭曲为第 j 个深度假设 dj 来计算相应的像素 p i,j ：</p><p>这里Ki表示视图i的内在矩阵。 R0,i 和 t0,i 表示参考视图和源视图 i 之间的相对旋转和平移参数。 给定 p i,j 和源特征图 Fi ，我们通过可微双线性插值重建扭曲的源特征图 Fi 。 遵循 MVSNet [35]，成本图是 −1 N − 1 扭曲源特征图 {Fi }N i=1 的方差<br>然而，考虑到基于 GRU 的优化器可以迭代更新深度图，我们在每次迭代中仅在狭窄的逆深度范围内采样一些深度假设。 具体来说，对于阶段 k 和迭代 t 的每个像素 p，我们在逆深度范围 Rk 中均匀采样 Dk 深度假设：</p><p>这里Im表示最小深度假设平面间隔，在4.2节中有详细介绍。 Dkt−1 是迭代 t − 1 中更新的深度图。为了用 2D CNN 处理局部成本量并将其与上下文和深度信息融合，我们取消深度维度并沿通道维度连接成本图。 因此，与 MVSNet [35] 不同，我们的局部成本量的形状是 CL ∈ RW ×H×(C×D) ，其中 C 和 D 分别表示通道和深度维度。</p><h4 id="3-2-2-特征聚合">3.2.2 特征聚合</h4><p>如图 3 所示，在每次迭代 t 中，我们使用两个轻量级提取器（由两个 2D 卷积层组成）从局部成本量和深度图 Dkt−1 中提取几何特征和深度特征。 上下文特征来自多尺度上下文特征提取器，每个阶段只需要提取一次。</p><p>为了构造最终的动态成本量 CD ，我们首先利用 2D 卷积层来处理几何特征和深度特征的串联。 然后，输出与上下文特征连接以形成动态成本量。 所有的级联操作都是在通道维度中执行的。</p><h3 id="3-3-多级-gru">3.3. 多级 GRU</h3><p>我们的动态成本量由 GRU 以迭代方式处理。 此外，为了利用多尺度信息并加速收敛，我们构建了多级 GRU 架构。 这样，动态成本量就构建在金字塔特征图上，并分别由多尺度 GRU 进行处理。 更具体地，在每个阶段k，优化模块将深度图更新T k 次，并输出一组更新量Δdkt ，其中t从1到T k 。 在每次迭代 t 中，输入深度图 Dkt−1 将更新为Dkt = Dkt−1 + Δdkt ，然后作为下一次迭代 t + 1 的输入。更重要的是，每个阶段最后一次迭代的深度图 DkT k 都会被上采样为 DkT k +1 。<br>然后，DkT k+1 将作为下一阶段的初始深度图Dk+1 0 。</p><p>如图4所示，深度图的质量可以是每次迭代后都有显着改善。 特别是，从图 4 中我们可以看到，基于 GRU 的优化模块可以填充无纹理区域中的孔洞并锐化边界。</p><h4 id="3-3-1初始深度预测">3.3.1初始深度预测</h4><p>基于GRU的优化模块根据局部空间信息更新深度值，这使得它对初始深度值敏感。 由于常见的<br>针对MVS中弱纹理区域和相似区域的问题，不可靠的初始深度图将使基于GRU的优化更容易输出错误的深度值。 因此，我们提出了一种初始深度值预测模块来在最粗阶段预测可靠的初始深度值。 受其他基于学习的 MVS 方法 [19,28,29,31] 的启发，我们通过三个模块预测概率体积 Pd 和相应的深度图：成本体积构建、3D CNN 正则化和回归。 初始深度预测模块的架构如图 5 所示。按照 MVSNet [35] 的工作，我们构建了一个微小的成本卷，它由稀疏深度假设组成，但包括足够大的逆深度范围。 然后，我们利用轻量级 3D CNN 对成本量进行正则化，得到与每个深度假设 d 对应的概率量 Pd。 最后，我们用 sof targmin 回归初始深度图 Dinit：</p><h4 id="3-3-2-gru">3.3.2 GRU</h4><p>受[11,26]的启发，我们设计了一个GRU模块来更新深度图。 我们的GRU模块的详细信息如下：<br>这里 σ 是 sigmoid 激活函数，W 表示对应的卷积网络的参数，conv 表示一个小的 2D 卷积模块，由 1 × 5 卷积和 5 × 1 卷积组成。<br>我们 GRU 的输入是动态成本量 t−1 。 动态 Ct−1 D 以及潜在隐藏状态 h t−1 成本量 CD 可以由先前的深度图 Dkt−1 刷新。 此外，在每个阶段，初始隐藏状态 h0 由上下文特征网络初始化。<br>基于隐藏状态 ht ，我们利用深度头模块来预测残差深度 Δdt 。 深度头模块包含两个卷积层，并使用 tanh 激活函数来约束输出值的范围。<br>在每个阶段 k 的最后一次迭代 T k 之后，我们使用掩模上采样模块 [26] 对当前深度 HW× 23−k 进行上采样。 更具体地说，基于最后一个 hidmap( 23−k k T den state h ，我们利用两个卷积层来预测 HW× 23−k× (2 × 2 × 9) 掩码，它表示邻居的 a 23−k 权重 然后可以根据预测的掩模通过加权组合将深度 HW×22−k 图上采样到 22−k 的分辨率。</p><h3 id="3-4-损失函数">3.4. 损失函数</h3><p>在训练阶段，我们的方法可以在不同的迭代步骤中从初始深度预测模块和基于 GRU 的多阶段优化模块输出几个深度图。 我们使用相应分辨率的地面真实深度图计算所有输出深度图上的 L1 损失。 因此，最终的损失是所有损失的加权和：</p><p>其中Linit是初始深度预测模块获得的初始深度图的损失。 Tk 是阶段 k 的优化迭代次数。 {Lki |i = 1…Tk + 1} 是 Tk 输出深度图和阶段 k 的上采样深度图的损失，λki 是相应的权重</p><h2 id="4-实验">4.实验</h2><p>我们在 DTU [1] 和 Tanks &amp; Temples 数据集 [13] 上评估了我们的方法。 进行了大量的实验来验证我们方法的准确性和效率。</p><h3 id="4-1-数据集">4.1. 数据集</h3><p>DTU数据集DTU数据集[1]是一个大规模的室内MVS数据集，包含不同光照条件下的128个不同的扫描和49个视图。 所有扫描都是在实验室环境下以相同的相机轨迹收集的。 DTU 提供 79 次训练扫描的地面真实深度图和 22 次评估扫描的 3D 点云。 遵循大多数 MVS 工作 [19,28,29,31] 中的配置，我们应用 DTU 数据集来训练和评估我们的网络。</p><p>Tanks &amp; Temples 数据集 Tanks &amp; Temples 数据集[13]是一个大规模的户外 MVS 数据集，它为不同的扫描提供了一组真实环境中的视频序列。 分为中级和高级两套，共14个场景。 我们还使用在 DTU 数据集 [1] 上训练的模型在中级和高级集上评估我们的方法，无需进行微调。</p><h3 id="4-2-实施细节">4.2. 实施细节</h3><p>训练在DTU数据集[1]上进行训练时，我们将输入图像的分辨率设置为640×512，输入图像的数量设置为N = 5。对于初始深度预测模块，我们将深度假设的数量设置为48。 对于局部成本量，我们将所有阶段的深度假设 Dk 的数量设置为 4。 我们定义逆深度的最小假设平面间隔 Im：<br>我们将Z设置为384，并将阶段0、1、2的深度假设间隔设置为4Im、2Im、Im（阶段0是粗略阶段，分辨率为W×H=80×64）。 对于每个阶段的优化模块，我们在阶段 0、1、2 到 3、3、3 设置迭代次数 T k。我们在 OneCycleLR 调度器下使用 AdamW 训练模型 48 个周期，学习率为 0.001。 我们将批量大小设置为 4，并在 1 个 NVIDIA GeForce RTX 3090 GPU 上训练我们的模型。</p><p>评估</p><p>我们在 DTU 评估集 [1] 以及 Tanks &amp; Temples 数据集 [13] 的中级和高级数据集上评估我们提出的方法。 对于 DTU 的评估，我们将输入图像的数量 N 设置为 5，输入图像的大小为 1600 × 1184。对于 Tanks &amp; Temples 数据集的评估，我们使用在 DTU 上训练的模型，无需任何微调。 我们将视图数量 N 设置为 7，输入图像大小为 1920 × 1056，初始深度预测模块中的深度假设数量为 96。Tanks &amp; Temples 数据集的相机位置、稀疏点云和深度范围 由开源 SfM 软件 OpenMVG 恢复[20]。</p><p>过滤与融合<br>与其他基于学习的 MVS 方法类似，我们根据光度和几何一致性。 我们对过滤算法进行了一些改进[22]，具体细节在补充材料中给出。 同时，我们对从初始深度预测模块获得的概率体积Pd进行上采样，作为每个像素的置信度测量，并丢弃估计深度概率低于0.3的像素。</p><h3 id="4-3-基准性能benchmark-performance">4.3. 基准性能Benchmark Performance</h3><p>我们将我们的方法与最近发布的基于学习的 MVS 方法在重建质量、运行时间和 GPU 内存消耗方面进行了比较。 如表所示。 如图 1、3 所示，我们的方法在 DTU 数据集 [1] 和 Tanks &amp; Temples 数据集 [13] 的高级序列上实现了最佳性能。 至于 Tanks &amp; Temples 数据集的中间序列，我们也取得了非常有竞争力的结果。 我们进一步比较我们的<br>方法与最近发表的基于学习的 MVS 方法[5,10,28,34,37,38]一起致力于提高表中的效率。 2 在时间和内存消耗方面。 我们使用原始尺寸图像为所有方法设置相同的配置，并在 DTU 和 Tanks &amp; Temples 数据集上分别将输入视图数设置为 5 和 7。 如表所示。 2、我们的方法在运行时间和内存消耗方面更加高效。 值得注意的是，我们的快速版本（Iters：1 11）几乎比 PatchmatchNet [28] 最接近的亚军快 2 倍。 更令人惊讶的是，我们的快速版本（Iters：1 1 1）仍然可以实现非常高的重建精度，如表所示。 1.这些实验结果明显表明我们的方法不仅可以提高计算速度并减少内存消耗，而且可以保证高质量的重建。</p><p>在图 6 中，我们在 DTU 数据集上对我们的方法和一些最先进的方法进行了更多质量比较。 从图 6 中我们可以看到，与 CVP-MVSNet [34] 和 PatchmatchNet [28] 相比，我们的方法提供了更准确的边界，并且在 3D 点云的结构细节上表现得更好。 此外，Tank &amp; Temples数据集上的一些3D点云重建结果如图7所示。从图7中我们可以看到，即使对于具有挑战性的高级序列，该方法的重建结果也是高质量的。 最后，表中列出了更全面的数量结果。 3、我们的方法在大多数评价指标上都取得了非常有竞争力的结果。</p><h3 id="4-4-消融研究">4.4. 消融研究</h3><p>在本节中，我们提供了广泛的消融实验来分析迭代次数、初始深度预测、动态成本量的组成部分和阶段数的影响。</p><h4 id="4-4-1-迭代次数">4.4.1 迭代次数</h4><p>按照 4.2 节中介绍的相同实验配置，我们进行不同迭代次数的消融实验。 这样我们就想验证一下迭代次数的效果。<br>结果列于表中。 4. 从表中。 从图4可以看出，迭代次数对于点云的完整性尤为重要。 这并不奇怪，因为我们的动态成本量可以聚合独特的上下文信息，GRU 可以进一步利用这些信息来填补漏洞。 类似的结论也可以在图4中得到证明，其中随着迭代次数的增加，孔被填充。 在这里，我们还想说我们的方法相当灵活，即我们可以根据实际任务需求调整测试阶段的迭代次数以平衡重建质量、速度和内存消耗。</p><h4 id="4-4-2-初始深度预测">4.4.2 初始深度预测</h4><p>在这个实验中，我们设计了一个额外的基于 GRU 的优化模块，进行 4 次迭代，以取代最粗阶段的初始深度预测 (IDP) 模块。 对于这个优化模块，我们将深度假设的数量设置为8，深度假设的间隔为16Im，逆深度范围的中值(dmin + dmax)/2用作初始输入深度图。</p><p>如表所示。 如图5所示，我们使用初始深度预测模块的方法在重建质量方面显然表现更好。 我们基于3DCNN的初始深度预测模块可以获得相当可靠的深度图，可以有效避免基于GRU的优化单元的局部优化问题。 特别是，我们的方法在完整性方面表现得更好，这进一步证明了所提出的初始深度预测模块的重要性。</p><h4 id="4-4-3-动态成本量的组成部分">4.4.3 动态成本量的组成部分</h4><p>在本实验中，我们在DTU的评估集上评估了深度特征（DF）和上下文特征（CF）在动态成本量构建过程中的有益效果[1]。 如表所示。 6、深度特征和上下文特征对重建结果的完整性影响很大，可以将完整性误差从0.368降低到0.313。 没有深度特征和上下文特征，动态成本量只能提供从局部成本中提取的几何特征信息</p><p>实验结果还证明，通过聚合附加深度特征信息和上下文特征信息构建动态成本量是我们的方法在 DTU 评估集上实现最先进性能的关键。</p><h4 id="4-4-4级数number-of-stages">4.4.4级数Number of Stages</h4><p>我们进一步在总阶段数为 2 和 4 的情况下评估我们的方法，相应的最精细阶段的分辨率分别为 H4 × W 4 和 H×W 。 我们从重建质量、运行时间和 GPU 内存消耗方面评估了 DTU [1] 和 Tanks &amp; Temples [13] 上的所有模型。 值得注意的是，我们设置了不同的上采样模块比率，以使所有模型输出全分辨率深度图。 如表所示。 7、随着阶段数量的增加，在DTU和Tanks &amp; Temples基准上性能有了显着提升，但同时运行时间和GPU显存消耗也显着增加。</p><h2 id="5-结论">5. 结论</h2><p>在这项工作中，我们提出了一种新颖的迭代动态成本量，可以由我们提出的多级 GRU 进行处理。 我们的方法非常有效，可以处理非常高分辨率的图像。 和…相比<br>与其他基于学习的 MVS 方法相比，我们的方法在准确性、速度和内存使用方面达到了最先进的结果。 此外，我们的方法非常灵活，可以通过调整测试阶段的迭代次数在准确性和效率之间取得更好的平衡。 未来，我们希望利用更强大的特征提取器来进一步提高性能。</p><h2 id="致谢">致谢</h2><p>该工作得到了国家自然科学基金项目（62001394、61871325）和国家重点研发计划项目（2018AAA0102803）的部分支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Effi MVS翻译&lt;/h1&gt;
&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;在本文中，我们提出了一种用于多视图立体的新颖的迭代动态成本量。 与其他作品相比，我们的成本量要轻得多，因此可以使用基于 2D 卷积的 GRU 进行处理。 值得注意的是，每一步GRU 的输出可进一</summary>
      
    
    
    
    <category term="基于深度学习的多视角立体匹配技术" scheme="http://outbreak-sen.github.io/categories/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%A4%9A%E8%A7%86%E8%A7%92%E7%AB%8B%E4%BD%93%E5%8C%B9%E9%85%8D%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="MVS" scheme="http://outbreak-sen.github.io/tags/MVS/"/>
    
    <category term="深度学习" scheme="http://outbreak-sen.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>colmap介绍和使用</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/colmap%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/colmap%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2025-02-09T08:12:29.000Z</published>
    <updated>2025-02-09T08:12:59.310Z</updated>
    
    <content type="html"><![CDATA[<h1>colmap官方教程的笔记</h1><h2 id="需要cuda才能稠密重建-否则只能稀疏重建">需要CUDA才能稠密重建，否则只能稀疏重建</h2><p><a href="https://blog.csdn.net/weixin_44120025/article/details/123769174">Colmap论文——《Structure-from-Motion Revisited》论文阅读笔记</a></p><h2 id="tutorial">Tutorial</h2><p>传统上，基于图像的3D重建首先使用“运动结构Structure-from-Motion”来恢复场景的稀疏表示和输入图像的相机姿态。然后，此输出用作“多视图立体Multi-View Stereo”的输入，以恢复场景的密集表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/path/to/project/...</span><br><span class="line">+── images</span><br><span class="line">│   +── image1.jpg</span><br><span class="line">│   +── image2.jpg</span><br><span class="line">│   +── ...</span><br><span class="line">│   +── imageN.jpg</span><br><span class="line">+── database.db</span><br><span class="line">+── project.ini</span><br></pre></td></tr></table></figure><h3 id="重建的过程">重建的过程</h3><ul><li><p>Structure-from-Motion</p><ul><li>是将3D结构从投影重建为一系列图像的过程。输入是从不同视点拍摄的同一对象的一组重叠图像。输出是物体的三维重建，以及所有图像的重建的内在和外在相机参数。</li><li>通常，“运动结构”系统将此过程分为三个阶段： 特征检测与提取 特征匹配和几何验证 结构和运动重建</li><li>为了更好的重建需要：<ul><li>捕捉纹理良好的图像。如果场景本身没有包含足够的纹理，可以放置其他背景对象，如海报等。</li><li>在相似的照明条件下拍摄图像。避免高动态范围的场景（例如，有阴影的阳光照片或透过门/窗的照片）。避免在有光泽的表面上出现镜面反射。 拍摄具有高度视觉重叠的图像</li><li>确保每个对象至少在3张图像中可见——图像越多越好。 从不同的视角拍摄图像。不要仅通过旋转相机从同一位置拍摄图像，例如，在每次拍摄后走几步。同时，尽量从相对相似的角度获得足够的图像。请注意，更多的图像并不一定更好，并且可能导致重建过程缓慢。如果使用视频作为输入，请考虑对帧速率进行下采样。</li></ul></li></ul></li><li><p>Multi-View Stereo</p><ul><li>用SfM的输出来计算图像中每个像素的深度和/或法线信息。3D中多个图像的深度图和法线图的融合然后产生场景的密集点云。结合融合点云的深度和法线信息，利用泊松表面重建算法可以恢复场景的3D表面几何形状。</li></ul></li><li><p>Feature Detection and Extraction</p><ul><li>首先决定使用的内部摄影机模型，可以从嵌入的EXIF信息中自动提取信息然后在大型相机模型数据库中查找相机规格，也可以手动指定固有参数</li><li>如果您的所有图像都是由相同的物理相机以相同的缩放因子拍摄的，建议在所有图像之间共享内部信息。</li><li>如果在所有图像之间共享相同的相机型号，但并非所有图像都具有相同的大小或EXIF焦距，则程序将不正常地退出。</li><li>可以从图像中检测和提取新SIFT特征，也可以从文本文件中导入现有特征，如果导入现有功能，则每张图像旁边都必须有一个文本文件（例如/path/to/image1.jpg和/path/to/image1.jpg.txt）。</li><li>按照惯例，图像的左上角具有坐标（0，0），最左上角像素的中心具有坐标（0.5，0.5）</li></ul></li><li><p>特征匹配与几何验证</p><ul><li>找到不同图像中特征点之间的对应关系。</li><li>多种匹配方法：<ul><li>穷举<strong>Exhaustive</strong>匹配：像数量相对较低（数百张），则这种匹配模式应该足够快，并产生最佳的重建结果。</li><li>顺序<strong>Sequential</strong> 匹配：如果图像是按顺序采集的，例如通过摄像机采集，则此模式非常有用。在这种情况下，连续帧具有视觉重叠，并且不需要完全匹配所有图像对。</li><li>词汇树<strong>Vocabulary Tree</strong>匹配：在这种匹配模式中，使用具有空间重新排序的词汇树，将每个图像与其视觉上最近的邻居进行匹配。这是大型图像集合（数千个）的推荐匹配模式。这需要一个预先训练好的词汇树。</li><li>空间<strong>Spatial</strong> 匹配：这种匹配模式将每个图像与其空间上最近的邻居进行匹配。空间位置可以在数据库管理中手动设置。默认情况下，COLMAP还会从EXIF中提取GPS信息，并将其用于空间最近邻搜索。</li><li>传递<strong>Transitive</strong>匹配：如果图像A与图像B匹配并且B与C匹配，则该匹配器尝试直接将A与C匹配。</li><li>自定义<strong>Custom</strong> 匹配：此模式允许指定单个图像对进行匹配或导入单个特征匹配。要指定图像对，必须为文本文件提供每行一个图像对：</li></ul></li><li>详尽匹配的预期时间从几十张图像的几分钟到数百张图像的几个小时，再到数千张图像的数天或数周。</li></ul></li><li><p>稀疏重建</p><ul><li>COLMAP首先将所有从数据库中提取的数据加载到存储器中，并从初始图像对中对重建进行种子化。然后，通过注册新图像和三角测量新点来逐步扩展场景。</li></ul></li><li><p>导入和导出</p><ul><li>建议以COLMAP的数据格式导出重建，方法是选择“文件”&gt;“导出”导出当前查看的模型，或选择“文件&gt;全部导出”导出所有重建的模型。使用重建的摄影机、图像和点的单独文本文件将模型导出到选定文件夹中。当以COLMAP的数据格式导出时，您可以重新导入重建，以便以后进行可视化、图像不失真，或者从它停止的地方继续现有的重建。要导入模型，请选择“文件”&gt;“导入”，然后选择导出文件夹路径。</li><li>也可以通过选择“文件”&gt;“导出为…”以各种其他格式导出模型，如Bundler、VisualSfM 1、PLY或VRML。</li></ul></li><li><p>密集重建</p><ul><li><p>为所有注册图像生成深度图和法线图，将深度图和法向图融合为具有法线信息的密集点云，并最终使用Poisson或Delaunay重建从融合的点云中估计密集表面。</p></li><li><p>点云的重建法线不能在COLMAP中直接可视化，但例如在Meshlab中，通过启用“渲染&gt;显示法线/曲率”（Render&gt;Show Normal/Curvature）。同样，重建的密集表面网格模型必须使用外部软件进行可视化。</p></li><li><p>除了内部密集重建功能外，COLMAP还导出到其他几个密集重建库，如CMVS/PMVS或CMP-MVS。请选择“附加”&gt;“无失真图像”（Extras &gt; Undistort images），然后选择适当的格式。输出文件夹包含重建图像和未失真图像。此外，这些文件夹还包含用于执行密集重建的示例shell脚本。要运行PMVS2，请执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./path/to/pmvs2 /path/to/undistortion/folder/pmvs/ option-all</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="数据格式">数据格式</h2><ul><li><p>COLMAP将所有提取的信息存储在一个SQLite数据库文件中。可以使用COLMAP  GUI中的数据库管理工具包、提供的C++数据库API（请参阅src/COLMAP/scene/database.h）或您选择的脚本语言（请参阅scripts/python/database.py），该数据库包含以下表格：</p><ul><li><p>cameras：相机和图像之间的关系是1比N</p></li><li><p>images</p></li><li><p>keypoints：关键点被存储为前两列分别是图像中的X和Y位置float32二进制。第三列是特征的比例，第四列是特征方向（根据SIFT约定）</p></li><li><p>descriptors：描述符被存储为行主uint8二进制Blob，其中每一行描述关键点表中相应条目的特征外观，行表指定每个图像检测到的特征数量</p></li><li><p>matches：特征匹配将其输出存储在匹配表中</p></li><li><p>two_view_geometries：几何验证存储在two_view_geometries表中</p></li></ul></li></ul><h2 id="相机模型分类">相机模型分类</h2><ul><li>SIMPLE_PINHOLE，PINHOLE：如果您的图像事先没有失真，请使用这些相机模型。它们分别使用一个和两个焦距参数。</li><li>IMPLE_RADIAL，RADIAL：如果内部未知，并且每张图像都有不同的相机校准，例如，在互联网照片的情况下，这应该是选择的相机型号。这两个模型都是OPENCV模型的简化版本，仅分别用一个和两个参数对径向畸变效应进行建模。</li><li>OPENCV，FULL_OPENCV：如果事先知道校准参数，请使用这些相机模型。<ul><li>SIMPLE_RADIAL_FISHEEYE、RADIAL_FISHEEYE、OPENCV_FISHEEY、FOV、THIN_PRISM_FISHEYE：将这些相机模型用于鱼眼镜头·</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;colmap官方教程的笔记&lt;/h1&gt;
&lt;h2 id=&quot;需要cuda才能稠密重建-否则只能稀疏重建&quot;&gt;需要CUDA才能稠密重建，否则只能稀疏重建&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44120025/article/d</summary>
      
    
    
    
    <category term="传统图形学" scheme="http://outbreak-sen.github.io/categories/%E4%BC%A0%E7%BB%9F%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="SFM" scheme="http://outbreak-sen.github.io/tags/SFM/"/>
    
    <category term="colmap" scheme="http://outbreak-sen.github.io/tags/colmap/"/>
    
  </entry>
  
  <entry>
    <title>GAN生成对抗模型入门</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E6%A8%A1%E5%9E%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E6%A8%A1%E5%9E%8B%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-09T08:10:15.000Z</published>
    <updated>2025-02-11T01:53:32.114Z</updated>
    
    <content type="html"><![CDATA[<h1>GAN笔记</h1><h2 id="简介">简介</h2><p>GAN的思想来自零和博弈理论，由两个部分组成，一个是生成器Generator，随机接收一个随机噪声来生成图像。一个是鉴别器Discriminator，判断一张图像是不是“真实的”，输入是一张图像，输出是该图像为真实图像的概率，介于0-1之间，概率值越小认为生成图像不真实的可能性越大。生成器的目标是通过生成接近真实的图像来欺骗判别器，而判别器的目标是尽量辨别出生成器生成的假图像和真实图像的区别。</p><p>自编码器（Auto-Encoder)以及变分自编码器（Variational  Auto-Encoder)都是典型的生成器。输入通过Encoder编码成code，然后code通过Decoder重建原图，其中自编码器中的Decoder就是生成器，code可随机取值，产生不同的输出。 <strong>自编码器</strong>是一种能够通过无监督学习，对输入数据进行特征提取，学习到数据的抽象表示，称为编码过程，编码结果往往维度远小于输入数据，自编码器可以用于降维和特征提取，</p><p><strong>变分自编码器</strong>（Variational auto-encoder，VAE）是一类重要的生成模型（generative model），它于2013年由Diederik P.Kingma和Max Welling提出，是自动编码器的升级版，</p><p>生成器和判别器都可以自我训练，但生成器自我训练产生的图像是模糊的，无法产生逼近真实图像的假图像</p><p>而判别器也可以自我训练，给定一个输入图像，输出一个概率置信度，介于0-1之间</p><h2 id="发展">发展</h2><p><a href="https://cloud.tencent.com/developer/article/1645877">参考</a></p><ul><li><p>GAN（Generative Adversarial Network）生成对抗网络，由Ian Goodfellow在2014年提出。</p><ul><li>《Conditional Generative Adversarial Nets》2014</li><li>为MNIST手写数码数据集、CIFAR-10小件图片数据集、多伦多人像数据集生成新案例。</li></ul></li><li><p>CGAN(Conditional Generative Adversarial Nets，可用条件约束的对抗神经网络)</p><ul><li>《Conditional Generative Adversarial Nets》</li><li>一个假设的数据分布，但是这样自由散漫的方式对于较大的图像就不太可控了，CGAN方法<strong>提出了一种带有条件约束的GAN，将额外信息y输送给判别模型和生成模型,作为输入层的一部分,从而实现条件GAN，是在Mnist数据集上以类别标签为条件变量，生成指定类别的图像，把纯无监督的GAN变成有监督的模型。</strong></li><li>Conditional GANs 是最先进的GAN的核心主题。这篇论文展示了如何整合数据的标签，从而实现更稳定的GAN训练，对于关注图像到图像或文本到图像的论文尤其重要。</li></ul></li><li><p>DCGAN(深度卷积GAN)</p><ul><li>《unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks》</li><li>通过卷积的方式将100维的随机噪声输入映射成一张图像，使用卷积层代替了全连接层，采用带步长的卷积代替上采样，更好的提取图像特征，判别器和生成器对称存在，极大的提升了GAN训练的稳定性和生成结果的质量。判别器中采用leakyRELU而不是RELU来防止梯度稀疏，而生成器仍然采用RELU，但输出层采用tanh。并没有从根本上解决GAN训练不稳定的问题，往往是训练一个多次，训练另一个一次。</li><li><strong>展示了卷积层与 GAN 是怎样组合的</strong>，还提供了其他一系列其他的参考架构。论文还讨论了诸如<a href="https://so.csdn.net/so/search?q=%E5%8F%AF%E8%A7%86%E5%8C%96&amp;spm=1001.2101.3001.7020">可视化</a>GAN特征，潜在空间插值，用鉴别器特征训练分类器，结果评价等方面。DCGAN 论文是必读的 GAN 论文，因为它的结构非常清晰，代码容易使用，可以马上用在您的 GAN 开发中。</li></ul></li><li><p>Pix2Pix</p><ul><li>《Image-to-Image Translation with Conditional Adversarial Networks》</li><li><strong>Pix2Pix是另一种图像到图像转换的GAN模型</strong>。该框架使用配对的训练样本，并在GAN模型中使用许多不同的配置。PatchGAN观察图像的70 x 70区域，以确定它们是真实的还是虚假的，而不是查看整个图像。该模型还提出了一个有趣的U-Net风格生成器结构，以及在生成器模型中使用ResNet样式的跳跃连接。有许多很酷的应用，例如边缘图到照片般真实的图像。</li><li>生成高质量的图像，并且可以通过人为控制生成的图像。</li></ul></li><li><p>CycleGAN</p><ul><li>《Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks》朱俊彦等人于2017年发表题为《使用一致循环生成网络进行非配对图像转换》的论文</li><li><strong>讨论了图像到图像的迁移问题</strong>而不是随机向量的图像合成问题。CycleGAN可以更具体地处理没有配对的图像转换的训练样本。因为循环一致性损失公式的优雅以及如何稳定GAN训练的方式。有许多有趣的程序使用CycleGAN，例如超分辨率，风格迁移，让马变为斑马。</li><li><strong>pix2pix对训练样本要求较高，需要成对的数据集，而这种样本的获取往往需要耗费很大精力。CycleGAN恰巧解决了该问题，实现两个domain之间的转换，即只需要准备两种风格的数据集，让GAN去学习</strong>将domain X中的图片转换成domain Y的风格(不改变domain X原图中物体，仅仅实现风格转换)。</li></ul></li><li><p>StyleGAN</p><ul><li><p>A Style-Based Generator Architecture for Generative Adversarial Networks</p></li><li><p>对于discriminator，它的输入是一张图片，它需要去鉴别出这张图片是真实图片还是generator产生的图片，同时它还需要分辨出这张输入的图片来自于哪个domain(哪种风格)。对于generator，它有两个输入，分别是目标domain和输入图片，它的输出是一张符合目标domain风格的图片。</p></li><li><p>CycleGAN的优点是它可以实现跨域图像翻译，不需要大量的并行数据，并且可以处理不同分辨率的图像。CycleGAN的缺点是它的生成器网络结构相对简单，生成的图像质量可能不如StyleGAN高。</p><p>StyleGAN的优点是它可以生成高质量的图像，并且具有更好的控制性。StyleGAN的缺点是它需要大量的高质量数据进行训练，并且不能实现跨域图像翻译。</p></li></ul></li><li><p>StackGAN</p><ul><li>《Text to Photo-realistic Image Synthesis with Stacked Generative Adversarial Networks》</li><li>堆叠生成对抗网络（StackGan）非常独特，因为它是<strong>从自然语言文本到图像的转换</strong>。它非常类似于Conditional GANs和Progressively Growing GANs。StackGAN模型的工作方式类似于Progressively Growing GANs，因为它可以在多尺度上工作。StackGAN首先输出64 * 64的图像，然后将其作为先验信息生成256 * 256的图像。</li><li>第一阶段的GAN根据文字描述草绘出一张简单形状和基本颜色符合的低分辨率图片，第二阶段的GAN把第一阶段的结果和文字条件作为输入，生成具有照片真实感的高分辨率的图片。</li></ul></li><li><p>StarGAN</p><ul><li>《StarGAN: Unified Generative Adversarial Networks for Multi-Domain Image-to-Image Translation》</li><li>有的时候我们可能希望图片能在n个domain当中互转，那依据CycleGAN的设计思路，理论上我们需要训练<img src="https://i-blog.csdnimg.cn/blog_migrate/0fada3075772b779cf7c96d2ecbbef5a.png" alt="img">个generato 。很明显这需要训练的generator太多了。那为了用更少的generator实现多个风格之间的互转，StarGAN被提出了。</li><li>鉴别器D 学习去辨别真实图像和生成图像，以及对图像进行所属域的分类（<em><strong>两个输出</strong></em>）。生成器接受图像和目标域标签（<em><strong>两个输入</strong></em>）</li></ul></li><li><p>BigGAN</p><ul><li>《Large Scale GAN Training for High Fidelity Natural Image Synthesis》</li><li>是ImageNet的当前最新技术。这种模型很难在本地机器上实现，并且模型中有许多组件，如自注意力，频谱归一化和带有投影鉴别器的cGAN，这些都在他们的论文中得到了很好的解释。而且论文对当前最新技术的基础论文进行了全面的概述。</li><li>《Large Scale GAN Training for High Fidelity Natural Image Synthesis》展现了用BigGAN技术生成合成照片的案例</li></ul></li><li><p>Omni-GAN</p><ul><li>《On the Secrets of cGANs and Beyond》</li><li>条件生成对抗网络 (cGAN) 是生成高质量图像的强大工具，但现有方法大多性能不令人满意或存在模式坍塌的风险。OmniGAN，是 cGAN 的一种变体，针对训练合适判别器的问题。关键是要确保判别器接受强监督并适度正则化以避免坍塌。</li></ul></li><li><p>infinite conditional GANs 或 MIC-GANs</p><ul><li>《Unsupervised Image Generation with Infifinite Generative Adversarial Networks》</li><li>旨在用简约的先验知识生成图像。</li></ul></li><li><p>WGAN(Wasserstein GAN)</p><ul><li>《Wasserstein GAN》</li><li>将原来的二分类任务变为回归任务，用最小二乘损失函数来优化。从<strong>损失函数</strong>的角度对GAN进行了改进，理论上给出了GAN训练不稳定的原因，提出的<strong>Wassertein距离</strong>来衡量数据分布和真实数据分布之间的距离，理论上解决了训练不稳定的问题。也解决了<strong>模式崩溃问题（collapse mode）</strong>（生成器倾向于生成一些有把握但相似的图片，而不敢轻易地尝试去生成没把握的新图片，从而缺乏多样性的情况），使得生成器生成结果更加多样。</li></ul></li><li><p>WGAN-GP(WGAN的改进版本)</p><ul><li>《Improved Training of Wasserstein GANs》</li><li>WGAN有时候也会伴随样本质量低、难以收敛等问题，WGAN-GP是WGAN的改进版</li></ul></li><li><p>LSGAN(<strong>最小二乘GAN</strong>)</p><ul><li>《Least Squares Generative Adversarial Networks》</li><li>以交叉熵作为损失，会使得生成器不会再优化那些被判别器识别为真实图片的生成图片，因为生成器已经完成我们为它设定的目标——尽可能地混淆判别器，交叉熵损失已经很小了，而最小二乘就不一样了，要想最小二乘损失比较小，在混淆判别器的前提下还得让生成器把距离决策边界比较远的生成图片拉向决策边界。</li></ul></li><li><p>BEGAN（Boundary Equilibrium GAN）</p><ul><li>《BEGAN: Boundary Equilibrium Generative Adversarial Networks》</li><li>边界均衡GAN，基于<strong>均衡思想</strong>的改进，其不需要训练的技巧，使用标准的训练步骤就可以快速稳定的收敛，BEGAN使用了<strong>自动编码器（auto-encoder）作为判别器</strong>，判别器的输入是图片，输出是经过编码解码后的图片，使用重构误差来衡量样本是生成的还是真实的</li></ul></li></ul><h1>应用</h1><p><a href="https://cloud.tencent.com/developer/article/2011384">参考</a></p><ul><li>《Detail Me More: Improving GAN’s photo-realism of complex scenes》</li><li>如果在场景的特定区域检测到或需要一盏灯，代理会为该图像块分配一个细粒度的灯判别器。这可以促使生成器学习灯的形状和阴影模型。在生成对抗网络（GAN）中添加一个“代理”模块来解决这个问题。代理任务是在图像区域中调解多个判别器的使用。</li></ul><h3 id="图像编辑-基于stylegan"><strong>图像编辑-基于StyleGAN</strong></h3><ul><li>StyleCLIP<ul><li>《Text-Driven Manipulation of StyleGAN Imagery》</li><li>利用最近引入的对比语言图像预训练 (CLIP) 模型，以便为 StyleGAN <a href="https://cloud.tencent.com/product/tiia?from_column=20065&amp;from=20065">图像处理</a>开发一个基于文本的界面。提出一种将文本映射到 StyleGAN 风格空间中的方法，实现交互式文本驱动的图像操作。</li></ul></li></ul><h3 id="图像转换">图像转换</h3><ul><li>SPatchGAN<ul><li>《SPatchGAN: A Statistical Feature Based Discriminator for Unsupervised Image-to-Image Translation》</li><li>对于无监督的图像到图像转换，提出一种判别器架构专注于统计特征而不是单个patch感受野。与现有方法对生成器施加越来越多的约束不同，方法通过简化框架促进了形状变形并增强细节。</li></ul></li></ul><h3 id="文字生成图像">文字生成图像</h3><ul><li><strong>DAE-GAN</strong><ul><li>《DAE-GAN: Dynamic Aspect-aware GAN for Text-to-Image Synthesis》</li><li>文本转换生成图像是指，从给定的文本描述中生成图像，保持照片真实性和语义一致性。此前方法通常使用句子特征嵌入去生成初始图像，然后用细粒度的词特征嵌入对初始效果进行细化。</li><li>本文提出一种动态 Aspect-awarE GAN (DAE-GAN)，从多个粒度（包括句子级、词级和aspect级）全面地表示文本信息。</li></ul></li></ul><h3 id="风格迁移">风格迁移</h3><ul><li>DRB-GAN<ul><li>《 DRB-GAN: A Dynamic ResBlock Generative Adversarial Network for Artistic Style Transfer》</li><li>提出一种用于艺术风格迁移的动态 ResBlock 生成对抗网络（DRB-GAN）。风格码被建模为连接风格编码网络和迁移网络的动态 ResBlocks 的共享参数。</li><li>在编码网络中，融入了风格的类感知注意机制；在迁移网络中，多个 Dynamic ResBlocks 来整合风格码和提取的 CNN 语义特征，然后输入到空间实例归一化（SWLIN）解码器，实现艺术风格迁移。</li></ul></li></ul><h3 id="动漫风格化">动漫风格化</h3><ul><li>AnimeGAN<ul><li>AnimeGAN仍然存在一些明显的问题，例如模型生成的图像中存在高频伪影。nime GAN由于使用了实例归一化，很容易产生高频伪影，这与styleGAN产生高频伪影的原因是一样的。AnimeGANv2使用与AnimeGAN相同的判别器，不同之处在于判别器使用层归一化而不是实例归一化。AnimeGANv2通过简单的改变网络中特征的归一化来防止高频伪影的产生。</li></ul></li><li>makeGirlsMoe<ul><li>《Towards the Automatic Anime Characters Creation with Generative Adversarial Networks》</li><li>还带一个网站https://make.girls.moe/#/</li></ul></li></ul><h3 id="图像编辑-人脸">图像编辑-人脸</h3><ul><li>latent-transformer<ul><li>《A Latent Transformer for Disentangled Face Editing in Images and Videos》</li><li>过 StyleGAN 生成器的潜在空间来编辑人脸属性，训练专用的潜在转换网络，并在损失函数中加入显式解耦和ID保留损失项。并将方法推广到视频。</li></ul></li></ul><h3 id="生成正面人像图片">生成正面人像图片</h3><ul><li>《人脸转正：使用全球及地方GAN感知合成拟真正面人像图片》</li></ul><h3 id="消除雨">消除雨</h3><ul><li>《使用条件性GAN消除图片中的雨》</li></ul><h3 id="生成人体新体态">生成人体新体态</h3><ul><li>《Pose Guided Person Image Generation》</li></ul><h3 id="面部老化">面部老化</h3><ul><li>《Face aging with conditional generative adversarial networks》<ul><li>Grigory Antipov等人于2017年发表了题为《使用条件性GAN进行面部老化处理》的论文。文中介绍了使用GAN生成不同年龄段人脸图片的方法。</li></ul></li></ul><h3 id="图片混合">图片混合</h3><ul><li>GP-GAN<ul><li>《GP-GAN: Towards Realistic High-Resolution Image Blending》</li><li>Huikai Wu等人于2017年发表了题为《GP-GAN：关于现实高保真照片的混合》文中展示了GAN在混合照片，尤其是混合田野、大山及其大型物体照片中的应用。</li></ul></li></ul><h3 id="图像恢复-超分">图像恢复-超分</h3><ul><li>Fourier Space Losses for Efficient Perceptual Image Super-Resolution<ul><li>许多超分辨率 (SR) 模型仅针对精度效果进行优化，模型庞大、缺乏效率。利用傅立叶空间监督损失来改进从丢失的高频 (HF) 内容，并设计直接在傅立叶域的判别器架构以更好地匹配目标 HF 分布。与最先进的感知 SR 方法 RankSRGAN 和 SRFlow 相比，分别快 2.4 倍和 48 倍。</li></ul></li></ul><h3 id="图像恢复-修复">图像恢复-修复</h3><ul><li><p>Context Encoders</p><ul><li>《Context Encoders: Feature Learning by Inpainting》</li><li>介绍了如何使用GAN的文本编码器进行图片修复或填充空缺，即填补图片中某块缺失的部分。</li></ul></li><li><p>WaveFill</p><ul><li>《WaveFill: A Wavelet-based Generation Network for Image Inpainting》</li><li>引进WaveFill，基于小波修复，将图像分解为多个频段，并分别明确地填充每个频段中的缺失区域。WaveFill 使用离散小波变换 (DWT)  分解图像，自然地保留空间信息。它将L1重建损失应用于分解的低频段，将对抗性损失应用于高频段，从而在完成空间域图像的同时有效地减轻频间冲突。</li></ul></li><li><p>CTSDG</p><ul><li>《Image Inpainting via Conditional Texture and Structure Dual Generation》</li><li>提出一种用于图像修复的新型双流网络，以耦合方式进行结构约束的纹理合成，以及纹理引导的结构重建，可以更好地相互利用以获得更合理的生成。</li></ul></li></ul><h3 id="图像外插值-图像延展">图像外插值-图像延展</h3><ul><li>SemIE<ul><li>《SemIE: Semantically-aware Image Extrapolation》</li><li>对于给定的图像，首先使用语义分割方法获得对象分割图；分割图被输入网络以计算外推语义分割和相应的全景分割图。输入图像和获得的分割图进一步用于生成最终的图像。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GAN笔记&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;GAN的思想来自零和博弈理论，由两个部分组成，一个是生成器Generator，随机接收一个随机噪声来生成图像。一个是鉴别器Discriminator，判断一张图像是不是“真实的”，输入是一张图像，输出是该</summary>
      
    
    
    
    <category term="深度学习" scheme="http://outbreak-sen.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GAN生成对抗模型" scheme="http://outbreak-sen.github.io/tags/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>我的ubuntu环境配置方法</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/%E6%88%91%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/%E6%88%91%E7%9A%84ubuntu%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</id>
    <published>2025-02-09T07:46:28.000Z</published>
    <updated>2025-02-09T07:46:46.920Z</updated>
    
    <content type="html"><![CDATA[<h1>Environment Installition</h1><p>20241101</p><p>[TOC]</p><h2 id="python3-8"><s>Python3.8</s></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install software-properties-common</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install python3.8</span><br><span class="line"> <span class="built_in">ls</span> /usr/bin/python* <span class="comment">#查看已安装版本</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/bin/python3   <span class="comment"># 删除原来的软连接</span></span><br><span class="line">~~<span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/bin/python3.8 /usr/bin/python3~~ <span class="comment">#不要添加python3的软连接，终端打不开，需要进tty终端修复</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/bin/python3.8 /usr/bin/python <span class="comment">#添加python新的软连接</span></span><br><span class="line">python3 --version <span class="comment">#查看版本</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install python3-pip <span class="comment">#设置一下pip</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.pip&amp;&amp;<span class="built_in">cd</span> ~/.pip</span><br><span class="line"><span class="built_in">sudo</span> gedit pip.conf</span><br><span class="line"><span class="comment"># [global]</span></span><br><span class="line"><span class="comment"># index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="comment"># index-index-url = https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="comment"># [install]</span></span><br><span class="line"><span class="comment"># trusted-host =</span></span><br><span class="line"><span class="comment"># pypi.tuna.tsinghua.edu.cn</span></span><br><span class="line"><span class="built_in">sudo</span> pip3 config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple <span class="comment">#或者</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Anaconda之后默认python和python的版本会出现问题，系统将使用Anaconda的python作为默认python，所以，所以我出现了本地安装了python3.8和python3.10后但是默认python是3.7且无法通过软连接改变，所以需要在软连接下进行修改：</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/littlexiaoshuishui/article/details/82504880</span></span><br><span class="line"><span class="comment"># 暂时找到的方法是在某个终端echo $PATH然后重新通过以下命令赋值，其中删除Anaconda的部分</span></span><br><span class="line">PATH=/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="搜狗拼音">搜狗拼音</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语言中将汉语安装并提到第一位</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -f </span><br><span class="line"><span class="built_in">sudo</span> apt install fcitx <span class="comment"># 设置语言从ibus到fcitx4</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/share/applications/fcitx.desktop /etc/xdg/autostart/#设置fcitx为自动开启</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i sogoupinyin_4.0.1.2800_x86_64.deb </span><br><span class="line"><span class="built_in">sudo</span> apt install libqt5qml5 libqt5quick5 libqt5quickwidgets5 qml-module-qtquick2 libgsettings-qt1</span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 在右上角设置</span></span><br></pre></td></tr></table></figure><h2 id="kernel5-15"><s>Kernel5.15</s></h2><p>更换版本之后网卡丢失，所以不要降级内核了而启用docker，该部分已弃用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uname -r #查看当前内核</span><br><span class="line">dpkg --get-selections | grep linux-image #查看可用内核</span><br><span class="line">sudo apt-get install linux-image-5.15-83 linux-headers-5.15-83 linux-image-extra-5.15-83 </span><br><span class="line">grep menuentry /boot/grub/grub.cfg #查看所有可用内核</span><br><span class="line">sudo gedit /etc/default/grub #更改默认内核</span><br><span class="line">sudo update-grub#更新内核文件</span><br><span class="line">reboot #查看是否更新成功</span><br><span class="line">sudo dpkg --purge linux-image-4.15.0-88-generic #卸载其他内核</span><br></pre></td></tr></table></figure><h2 id="nvidia">Nvidia</h2><p>据说现在deb安装，可以直接安装对应版本的nvudia driver，并且不会掉驱动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 笔记本显示屏幕是核显</span></span><br><span class="line"><span class="comment"># 外接屏幕是独显</span></span><br><span class="line">lsmod | grep nouveau <span class="comment">#查看系统是否启用了nouveau显卡驱动，有内容输出，则说明nouveau已被启用</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/modprobe.d/blacklist.conf</span><br><span class="line">    <span class="comment">#---save the following info into file blacklist.conf---</span></span><br><span class="line">    blacklist nouveau</span><br><span class="line">    blacklist lbm-nouveau</span><br><span class="line">    options nouveau modeset=0</span><br><span class="line">    <span class="built_in">alias</span> nouveau off</span><br><span class="line">    <span class="built_in">alias</span> lbm-nouveau off</span><br><span class="line">    <span class="comment">#---end of the info saved----</span></span><br><span class="line"><span class="built_in">sudo</span> update-initramfs -u <span class="comment"># 更新内核</span></span><br><span class="line">reboot <span class="comment">#查看是否更新成功</span></span><br><span class="line">lsmod | grep nouveau <span class="comment">#查看系统是否禁用了nouveau显卡驱动</span></span><br><span class="line">lshw -c video <span class="comment"># 查看显卡型号，在官网https://www.nvidia.cn/Download/index.aspx查找对应的驱动，如果内核不对那就是下载错了，需要下载最新版</span></span><br><span class="line"><span class="comment"># 如果发现编译失败，看一下vim /var/log/nvidia-installer.log，常见错误是使用了gcc11,不符合安装要求，要安装gcc12,不要把gcc卸载了</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-12# 但是更重要的是更新Gcc版本，基本上ubuntu都安装了gcc11和gcc12,所以关键是切换版本</span><br><span class="line"><span class="built_in">sudo</span> ./NVIDIA-Linux-x86_64-535.161.07.run -no-x-check <span class="comment">#安装驱动，并且取消x查看，要安装32适配库</span></span><br><span class="line">nvidia-smi <span class="comment"># nvidia驱动版本号和最大cuda版本，安装驱动后才有</span></span><br><span class="line"><span class="comment"># 之后不要通过software更新驱动</span></span><br><span class="line"><span class="comment"># 独显有用核显有用：删除/etc/X11/xorg.conf</span></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="cuda和cudnn">CUDA和CUDNN</h2><p>据说现在deb安装，可以直接安装对应版本的nvudia driver，并且不会掉驱动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">用.run的版本的安装方法</span><br><span class="line">以下为部分安装提示</span><br><span class="line">Do you accept the previously <span class="built_in">read</span> EULA?</span><br><span class="line">accept/decline/quit: accept# <span class="comment">#这一条提示不用管它</span></span><br><span class="line">You are attempting to install on an unsupported configuration. Do you wish to <span class="built_in">continue</span>?</span><br><span class="line">(y)es/(n)o [ default is no ]: y</span><br><span class="line">Install NVIDIA Accelerated Graphics Driver <span class="keyword">for</span> Linux-x86_64 384.81?</span><br><span class="line">(y)es/(n)o/(q)uit: n <span class="comment"># 如果在这之前已经安装好更高版本的显卡驱动就不需要再重复安装，如果需要重复安装就选择 yes,此外还需要关闭图形界面。</span></span><br><span class="line">Install the CUDA 9.0 Toolkit?</span><br><span class="line">(y)es/(n)o/(q)uit: y</span><br><span class="line">Enter Toolkit Location</span><br><span class="line">[ default is /usr/local/cuda-9.0 ]:/home/usrname/usr/local/cuda-9.0</span><br><span class="line">/usr/local/cuda-9.0 is not writable.</span><br><span class="line">Do you wish to run the installation with ‘<span class="built_in">sudo</span>’?</span><br><span class="line">(y)es/(n)o: y</span><br><span class="line"></span><br><span class="line">Please enter your password:</span><br><span class="line">Do you want to install a symbolic <span class="built_in">link</span> at /usr/local/cuda? <span class="comment"># 是否将安装目录通过软连接的方式 link 到 /usr/local/cuda，yes or no 都可以，取决于你是否使用 /usr/local/cuda 为默认的 cuda 目录。</span></span><br><span class="line">(y)es/(n)o/(q)uit: n</span><br><span class="line">Install the CUDA 9.0 Samples? <span class="comment">#安装与否没有影响</span></span><br><span class="line">(y)es/(n)o/(q)uit: n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装的时候需要切换G++GCC版本</span></span><br><span class="line"><span class="comment"># cuda去官网找sh文件</span></span><br><span class="line"><span class="comment"># 正式开始安装cuda</span></span><br><span class="line"><span class="comment"># cudnn下载deb，dpkg下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量到.bashrc</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line">比如：<span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载</span></span><br><span class="line"><span class="comment"># cuda安装时就已经准备好了卸载的接口，卸载程序在`/usr/local/cuda-xx.x/bin`下，需要注意的是cuda10.0及之前的版本卸载程序名为`uninstall_cuda_xx.x.pl`，而cuda10.1及之后的版本卸载程序名为`cuda-uninstaller`</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/cuda-xx.x/bin/</span><br><span class="line"><span class="built_in">sudo</span> ./cuda-uninstaller#或者<span class="built_in">sudo</span> ./uninstall_cuda_xx.x.pl</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/local/cuda-xx.x</span><br><span class="line"><span class="comment">#使用dpkg卸载cudnn</span></span><br><span class="line"><span class="built_in">sudo</span> dpkg -l | grep cudnn</span><br><span class="line"><span class="built_in">sudo</span> dpkg -r libcudnn8-samples</span><br><span class="line"><span class="built_in">sudo</span> dpkg -r libcudnn8-dev</span><br><span class="line"><span class="built_in">sudo</span> dpkg -r libcudnn8</span><br><span class="line"></span><br><span class="line">最后边加了一句<span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/local/cuda-xx.x，这是因为一般情况下cuda都配置了cudnn，在运行卸载程序时只会卸载cuda而不会一并删除cudnn的文件。因为cudnn文件还在的缘故，自己的cuda-xx.x文件夹仍然在，需要手动删除。</span><br></pre></td></tr></table></figure><h2 id="切换gccg-版本">切换GCCG++版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version <span class="comment"># 版本为11.4，gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载低版本gcc g++，并进行设置，tensorflow和pytorch一般使用4.8</span></span><br><span class="line"><span class="built_in">sudo</span> gedit /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">增加</span><br><span class="line"></span><br><span class="line">deb http://dk.archive.ubuntu.com/ubuntu/ xenial main</span><br><span class="line">deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-4.8 g++-4.8 </span><br><span class="line"><span class="comment"># 使用update-alternatives管理多个版本的gcc g++ python，最后一位是优先级</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 1</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 2</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11.4 2</span><br><span class="line"><span class="comment"># 可以通过以下命令来切换使用的gcc和g++版本</span></span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --config g++</span><br><span class="line"><span class="built_in">sudo</span> update-alternatives --config gcc</span><br></pre></td></tr></table></figure><h2 id="docker卸载">Docker卸载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除docker残留物，没有就不用卸载了</span></span><br><span class="line">    dpkg -l | grep -i docker</span><br><span class="line"><span class="comment"># 删除io ce</span></span><br><span class="line">    <span class="built_in">sudo</span> apt-get purge -y docker-engine docker docker.io docker-ce</span><br><span class="line">    <span class="built_in">sudo</span> apt-get autoremove -y --purge docker-engine docker docker.io docker-ce</span><br><span class="line"><span class="comment"># 删除参数</span></span><br><span class="line">    <span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /var/lib/docker /etc/docker</span><br><span class="line">    <span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/apparmor.d/docker</span><br><span class="line">    <span class="built_in">sudo</span> groupdel docker</span><br><span class="line">    <span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /var/run/docker.sock</span><br><span class="line"><span class="comment"># 如果使用dpkg的方式安装 发现还未清除docker残留</span></span><br><span class="line">    <span class="built_in">sudo</span> find / -name <span class="string">&quot;*docker*&quot;</span></span><br><span class="line"><span class="comment"># rm 这些项</span></span><br><span class="line">    <span class="built_in">cd</span> /var/lib/dpkg/</span><br><span class="line">    <span class="built_in">sudo</span> gedit status</span><br><span class="line"><span class="comment"># 在status与status-old 文件里查找docker相关的项，删除相关内容。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker-desktop-deb安装-更新只需要重新安装deb">Docker Desktop(deb安装，更新只需要重新安装deb)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装地址：https://docs.docker.com/desktop/install/linux-install/</span></span><br><span class="line"><span class="comment"># for non-Gnome Desktop environments, gnome-terminal must be installed:</span></span><br><span class="line"><span class="comment"># sudo apt install gnome-terminal</span></span><br><span class="line"><span class="comment"># 卸载干净了</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"><span class="comment"># 首先添加Docker Desktop的apt源</span></span><br><span class="line"><span class="comment"># Add Docker&#x27;s official GPG key:</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates curl</span><br><span class="line"><span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line"><span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc <span class="comment">#a+r表示将读权限授予所有用户，最后的路径则是要修改权限的文件路径。该命令的目的是将GPG密钥文件的读权限授予所有用户，以确保所有用户都能够读取该文件中的密钥信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the repository to Apt sources:</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二，下载deb包</span></span><br><span class="line"><span class="comment"># 去官网下载</span></span><br><span class="line"><span class="comment"># 第三，安装deb包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> dkpg -i ./docker-desktop-4.28.0-amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三，添加用户</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span> <span class="comment"># 将当前用户添加到 docker 用户组中，以便您可以在不使用 sudo 的情况下运行 Docker 命令</span></span><br><span class="line">newgrp docker <span class="comment">#此命令用于切换到 docker 用户组。当您运行此命令后，您的 shell 将具有 docker 用户组的权限，建议写到zsh里面</span></span><br><span class="line"></span><br><span class="line">systemctl --user start docker-desktop <span class="comment"># --user 参数用于明确指定您希望在用户级别运行 systemctl 命令</span></span><br><span class="line">systemctl status docker-desktop</span><br><span class="line">systemctl --user stop docker-desktop</span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 记住一定要加--user，而且不能用sudo，不能用docker（service）沃日，搞了一个下午~！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## sign in 登录，现在登录需要pass才行，参考https://docs.docker.com/desktop/get-started/#credentials-management-for-linux-users</span></span><br><span class="line">gpg --generate-key</span><br><span class="line"><span class="comment"># 真实姓名： outbreak</span></span><br><span class="line"><span class="comment"># 您选定了此用户标识：“outbreak &lt;1023786231@qq.com&gt;”</span></span><br><span class="line"><span class="comment"># 我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数发生器有更好的机会获得足够的熵。</span></span><br><span class="line"><span class="comment"># gpg: /home/outbreak/.gnupg/trustdb.gpg：建立了信任度数据库</span></span><br><span class="line"><span class="comment"># gpg: 密钥 10B61AB8A00B94FC 被标记为绝对信任</span></span><br><span class="line"><span class="comment"># gpg: 目录‘/home/outbreak/.gnupg/openpgp-revocs.d’已创建</span></span><br><span class="line"><span class="comment"># gpg: 吊销证书已被存储为‘/home/outbreak/.gnupg/openpgp-revocs.d/951E377343482D391981EF4910B61AB8A00B94FC.rev’</span></span><br><span class="line"><span class="comment"># 公钥和私钥已经生成并被签名。</span></span><br><span class="line"><span class="comment"># pub   rsa3072 2024-04-03 [SC] [有效至：2026-04-03]</span></span><br><span class="line"><span class="comment">#       951E377343482D391981EF4910B61AB8A00B94FC</span></span><br><span class="line"><span class="comment"># uid                      outbreak &lt;1023786231@qq.com&gt;</span></span><br><span class="line"><span class="comment"># sub   rsa3072 2024-04-03 [E] [有效至：2026-04-03]</span></span><br><span class="line"><span class="comment"># 然后运行，后面接上pub</span></span><br><span class="line">pass init 951E377343482D391981EF4910B61AB8A00B94FC</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载 Docker Desktop</span></span><br><span class="line"><span class="built_in">sudo</span> apt purge docker-desktop</span><br><span class="line"><span class="built_in">rm</span> -r <span class="variable">$HOME</span>/.docker/desktop</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/local/bin/com.docker.cli</span><br></pre></td></tr></table></figure><h2 id="gpg蜜月">GPG蜜月</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates curl gnupg</span><br><span class="line"><span class="comment"># 其中，ca-certificates是一个软件包名称，它包含了一组根证书和中间证书，用于验证HTTPS连接的安全性</span></span><br><span class="line"><span class="comment"># 安装ca-certificates软件包可以确保系统具有最新的根证书列表。</span></span><br><span class="line"><span class="comment"># curl是一个用于在命令行中进行网络请求的工具，它支持多种协议，如HTTP、HTTPS、FTP等；安装curl软件包可以让我们在终端中方便地进行网络请求和下载文件。gnupg是GNU隐私卫士</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nvidiadocker-apt">NVIDIADocker(APT)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过apt，yun，zypper安装</span></span><br><span class="line"><span class="comment"># 参考https://docs.nvidia.com/datacenter/cloud-native/containertoolkit/latest/install-guide.html</span></span><br><span class="line"><span class="comment"># 安装nvidia驱动，运行nvidia-smi会有输出，</span></span><br><span class="line"><span class="comment"># 查看显卡是否存在 lspci | grep -i nvidia</span></span><br><span class="line"><span class="comment"># /////// 框内是一个命令</span></span><br><span class="line">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \</span><br><span class="line">  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \</span><br><span class="line">    sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \</span><br><span class="line">    <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br><span class="line"><span class="comment"># /////// 框内是一个命令</span></span><br><span class="line">    <span class="built_in">sudo</span> apt-get update</span><br><span class="line">    <span class="built_in">sudo</span> apt-get install -y nvidia-container-toolkit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Docker Configure the container runtime by using the nvidia-ctk command:</span></span><br><span class="line"><span class="built_in">sudo</span> nvidia-ctk runtime configure --runtime=docker</span><br><span class="line"><span class="comment"># nvidia-ctk命令修改了/etc/docker/daemon.json中的内容，文件中的内容更新之后Docker就可以使用NVIDIA Container Runtime.</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker#Restart the Docker daemon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如需在没有 sudo 的情况下运行 docker 命令，请创建 docker 组并添加您的用户。 </span></span><br><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 测试 docker run --runtime=nvidia -rm nvidia/cuda:9.0-base nvidia-smi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 nvidia-docker 安装效果</span></span><br><span class="line">docker run --gpus all --<span class="built_in">rm</span> nvidia/cuda nvidia-smi</span><br><span class="line"><span class="comment"># 会自动下载nvidia、cuda</span></span><br><span class="line"><span class="comment"># 注意：nvidia-docker v2 使用 --runtime=nvidia，而不是 --gpus all。nvidia-docker v1 </span></span><br><span class="line"><span class="comment"># 使用 nvidia-docker 别名，而不是 --runtime=nvidia 或 --gpus all 命令行标记。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tensorflow-docker">TensorFlow Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地主机上安装 Docker。</span></span><br><span class="line"><span class="comment"># 如需在 Linux 上启用 GPU 支持，请安装 NVIDIA Docker 支持。</span></span><br><span class="line"><span class="comment"># 通过 docker -v 检查 Docker 版本。对于 19.03 之前的版本，您需要使用 nvidia-docker2 和 -- runtime=nvidia 标记；对于 19.03 及之后的版本，您将需要使用 nvidia-container-toolkit 软件包和 --gpus all 标记。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的tag为latest-gpu-jupyter  </span></span><br><span class="line">docker pull tensorflow/tensorflow:latest-gpu-jupyter  </span><br><span class="line"></span><br><span class="line"><span class="comment"># latest：TensorFlow CPU 二进制映像的最新版本。（默认版本）</span></span><br><span class="line"><span class="comment"># nightly：TensorFlow 映像的每夜版。（不稳定）</span></span><br><span class="line"><span class="comment"># version:指定 TensorFlow 二进制映像的版本，例如：2.1.0</span></span><br><span class="line"><span class="comment"># devel :TensorFlow master 开发环境的每夜版。包含 TensorFlow 源代码。devel and custom-op 版本不再支持</span></span><br><span class="line"><span class="comment"># custom-op:于开发 TF 自定义操作的特殊实验性映像。详见此处。devel and custom-op 版本不再支持</span></span><br><span class="line"><span class="comment"># 版本&lt;= 1.15.0 (1.x) and &lt;= 2.1.0 (2.x) 的如果带有-py3的镜像里面有python3(3.5 for Ubuntu 16-based images; 3.6 for Ubuntu 18-based images; 3.8 for Ubuntu 20-based images) </span></span><br><span class="line"><span class="comment"># 版本&lt;= 1.15.0 (1.x) and &lt;= 2.1.0 (2.x) 的如果没有带有-py3的镜像里面只有Python 2.7</span></span><br><span class="line"><span class="comment"># -gpu tags are based on Nvidia CUDA. You need nvidia-docker to run them. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述标记下还有二级的tag</span></span><br><span class="line"><span class="comment"># 每个基本标记都有会添加或更改功能的变体：</span></span><br><span class="line"><span class="comment"># 标记变体 说明</span></span><br><span class="line"><span class="comment"># tag-gpu 支持 GPU 的指定标记版本</span></span><br><span class="line"><span class="comment"># tag-jupyter 针对 Jupyter 的指定标记版本</span></span><br><span class="line"></span><br><span class="line">如需在容器内运行在主机上开发的 TensorFlow 程序，请装载主机目录并更改容器的工作目录 (-v hostDir:containerDir -w workDir)</span><br><span class="line">docker run -it --<span class="built_in">rm</span> -v <span class="variable">$PWD</span>:/tmp -w /tmp tensorflow/tensorflow python ./script.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cmake">cmake</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install build-essential libncurses5-dev ninja-build libssl-dev libarchive13 libcurl4 librhash0 libuv1</span><br><span class="line"><span class="comment"># source下载地址https://cmake.org/files/，其中cmake-3.21.4-linux-x86_64.tar.gz是已编译好的，我们要用cmake-3.21.4.tar.gz，里面有bootstrap文件</span></span><br><span class="line"><span class="comment"># 千万不要sudo apt-get autoremove cmake</span></span><br><span class="line">tar -zxvf cmake-3.21.4.tar.gz </span><br><span class="line"><span class="built_in">cd</span> cmake-3.21.4</span><br><span class="line">./bootstrap --generator=Ninja</span><br><span class="line">ninja</span><br><span class="line"><span class="built_in">sudo</span> ninja install</span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure><h2 id="qt">QT</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sudo权限进入安装（安装在/opt目录下），软件所在目录：/opt/Qt5.12.9/Tools/QtCreator/bin/</span></span><br><span class="line"><span class="built_in">chmod</span> +x qt-opensource-linux-x64-5.12.9.run</span><br><span class="line"><span class="built_in">sudo</span> ./qt-opensource-linux-x64-5.12.9.run#只安装其中的qtcreator和QT5.12里的<span class="built_in">source</span>就可以了</span><br></pre></td></tr></table></figure><p>或者以下的方式安装两个就可以</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qt5* qttools5-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gflags">gflags</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgflags-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># source安装</span></span><br><span class="line"><span class="built_in">cd</span> gflags</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC -DBUILD_SHARED_LIBS=ON ..</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br></pre></td></tr></table></figure><h2 id="glog">glog</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgoogle-glog-dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># source安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/google/glog</span><br><span class="line"><span class="built_in">cd</span> glog</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC -DBUILD_SHARED_LIBS=ON ..</span><br><span class="line"></span><br><span class="line">cmakelists-----option (WITH_GTEST <span class="string">&quot;Use googletest&quot;</span> OFF)</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><h2 id="eigen">eigen</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev <span class="comment">#默认安装路径/usr/include/eigen3</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/eigen3/Eigen /usr/include/Eigen</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/Eigen /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/signature_of_eigen3_matrix_library /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/include/eigen3/unsupported /usr/include</span><br><span class="line"><span class="comment"># source安装</span></span><br><span class="line">tar -xvf eigen-3.4.0.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake .. </span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/eigen3/Eigen /usr/include/Eigen</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s  /usr/include/eigen3/Eigen /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/eigen3/signature_of_eigen3_matrix_library /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/eigen3/unsupported /usr/include</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ceres">ceres</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖glog和eigen</span></span><br><span class="line"><span class="comment"># 除此之外还依赖 Use ATLAS for BLAS &amp; LAPACK</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libatlas-base-dev</span><br><span class="line"><span class="built_in">mkdir</span> build&amp;&amp;<span class="built_in">cd</span> build</span><br><span class="line">cmake ../</span><br><span class="line">make -j5注意制定内核数，直接-j会导致内存不足而宕机</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line"><span class="built_in">sudo</span> make install <span class="comment">#不sudo就找不到</span></span><br></pre></td></tr></table></figure><h2 id="zsh">Zsh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh</span></span><br><span class="line"><span class="built_in">sudo</span> apt install zsh</span><br><span class="line"><span class="comment"># 然后将zsh设置为默认shell：</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装oh-my-zsh</span></span><br><span class="line"><span class="comment"># gitee安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install curl git</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># 外网安装</span></span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Powerlevel10k主题</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"><span class="comment"># 配置Powerlevel10k</span></span><br><span class="line"><span class="comment"># vim ~/.zshrc编辑.zshrc，将ZSH_THEME项改为：</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装各种插件</span></span><br><span class="line"><span class="comment">#zsh-autosuggestions</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment">#zsh-syntax-highlighting</span></span><br><span class="line"> git <span class="built_in">clone</span> https://gitee.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment">#使插件生效,上述插件安装完成后，需要修改.zshrc文件，编辑plugins项，修改如下：</span></span><br><span class="line"><span class="comment"># 值得注意的是，根据官方文档，zsh-syntax-highlighting 插件需放在最后</span></span><br><span class="line">plugins=(</span><br><span class="line">  git extract zsh-autosuggestions zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"><span class="comment">#使用source ~/.zshrc命令更新。</span></span><br><span class="line"><span class="comment"># vim ~/.zshrc编辑，添加以下一行</span></span><br><span class="line"><span class="built_in">setopt</span> no_nomatch <span class="comment">#解决无法识别*问题</span></span><br></pre></td></tr></table></figure><h2 id="clash">Clash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">将 Clash <span class="keyword">for</span> Windows.zip 和 subconverter.zip解压到主目录.</span><br><span class="line"><span class="built_in">cd</span> Clash <span class="keyword">for</span> Windows</span><br><span class="line">./cfw</span><br><span class="line"><span class="built_in">cd</span> ../subconverter</span><br><span class="line">./subconverter  <span class="comment">#运行后不要关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TUN模式</span></span><br><span class="line">打开Clash，点击General中Service Mode右边Manage，点击install，地球图标变为绿色后说明安装成功</span><br><span class="line">点击TUN Mode右边的开关，启用TUN模式，现在可以打开终端（终端没有设置代理），查看是否成功，上下两条命令的执行结果分别是开启TUN模式前后（代理为全局模式）的结果</span><br><span class="line"></span><br><span class="line"><span class="comment">## global里设置7890，自动开机，proxy设置</span></span><br><span class="line">点击一下sytem proxy</span><br><span class="line">127.0.0.1 7890</span><br><span class="line">127.0.0.1 7890</span><br><span class="line">127.0.0.1 8889</span><br><span class="line">127.0.0.1 1089</span><br><span class="line"></span><br><span class="line">经过调研，现在使用clash verge，</span><br></pre></td></tr></table></figure><h2 id="opencv3-contrib">opencv3+contrib</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install build-essential cmake-curses-gui ninja-build libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev pkg-config libgtk-3*</span><br><span class="line"><span class="comment"># https://github.com/opencv/opencv/releases?page=1</span></span><br><span class="line"><span class="comment"># https://github.com/opencv/opencv_contrib/tags</span></span><br><span class="line"><span class="comment"># 分别下载两个同版本的文件，分别解压，在opencv文件夹下</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">ccmake -G Ninja ..</span><br><span class="line">BUILD_EXAMPLES#编译示例代码</span><br><span class="line">BUILD_PNG(JPEG,TIFF,WEBP,OPENJPEG,JASPER,OPENEXR)#使opencv可以读取相应格式的图片</span><br><span class="line">WITH_QT#使用QT绘制窗口，会提供很多功能，建议开启，需要安装QT5</span><br><span class="line">OPENCV_EXTRA_MODULES_PATH=.opencv_contrib/modules#contrib 的目录，到modules，module可筛选</span><br><span class="line">OPENCV_GENERATE_PKGCONFIG#启用.pc文件生成以及标准 CMake 包，建议开启</span><br><span class="line">OPENCV_sfm设置为OFF因为会因为glog版本报错</span><br><span class="line">ninja</span><br><span class="line"><span class="built_in">sudo</span> ninja install</span><br><span class="line"><span class="built_in">sudo</span> ninja uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载时sudo ninja uninstall</span></span><br><span class="line"><span class="comment">#标定板下载https://calib.io/pages/camera-calibration-pattern-generator</span></span><br></pre></td></tr></table></figure><h2 id="ros2-humble">Ros2-humble</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用fishros，其脚本跑的是官方的安装流程</span></span><br><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . ./fishros</span><br><span class="line"><span class="comment"># 在~/.zshrc中加入</span></span><br><span class="line"><span class="built_in">source</span> /opt/ros/humble/setup.zsh</span><br></pre></td></tr></table></figure><h2 id="moveit-humble"><s>moveit-humble</s></h2><h2 id="realsense2"><s>realsense2</s></h2><h2 id="galaxy相机驱动">Galaxy相机驱动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./Galaxy_camera.run</span><br><span class="line"><span class="built_in">cd</span> Galaxy_camera/inc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> DxImageProc.h /usr/include</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> GxIAPI.h /usr/include</span><br></pre></td></tr></table></figure><h2 id="openvino">Openvino</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、Openvino2022安装 ubuntu 20.04</span></span><br><span class="line">./l_openvino_toolkit_p_2022.1.0.643_offline.sh</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment">#将.sh文件source</span></span><br><span class="line"><span class="comment">#如果python路径报错，修改setupvars.sh中</span></span><br><span class="line"><span class="comment">#SCRIPT_DIR改为</span></span><br><span class="line">SCRIPT_DIR=<span class="string">&quot;<span class="subst">$(abs_path <span class="string">&quot;<span class="variable">$&#123;(%):-%N&#125;</span>&quot;</span>)</span>&quot;</span> &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h1>Openvino2023安装 ubuntu22.04</h1><p>wget <a href="https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB">https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB</a><br>sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB<br>echo “deb <a href="https://apt.repos.intel.com/openvino/2023">https://apt.repos.intel.com/openvino/2023</a> ubuntu22 main” | sudo tee /etc/apt/sources.list.d/intel-openvino-2023.list<br>sudo apt update<br>apt-cache search openvino<br>sudo apt install openvino-2023.2.0</p><h2 id="anaconda">Anaconda</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./Anaconda3-2021.11-Linux-x86_64.sh# no sudo</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">#调整$PATH的位置</span><br></pre></td></tr></table></figure><h2 id="conda换源">Conda换源</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">gedit ~/.condarc</span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span> </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/  </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ </span><br></pre></td></tr></table></figure><h2 id="pip换源">PIP换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="vscode">VScode</h2><p>为了解决下载太慢的问题：</p><p><a href="https://blog.csdn.net/weixin_46621570/article/details/128007351">https://blog.csdn.net/weixin_46621570/article/details/128007351</a></p><h2 id="vlc">VLC</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install vlc</span><br></pre></td></tr></table></figure><h2 id="qq">QQ</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i linuxqq_3.2.0-16605_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="飞书">飞书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i Feishu-linux_x64-6.9.16.deb</span><br></pre></td></tr></table></figure><h2 id="libjpeg-turbo">libjpeg-turbo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认安装位置/opt/libjpeg-turbo</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -G<span class="string">&quot;Unix Makefiles&quot;</span> ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line">make uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用时libjpeg-turbo的安装包没有提供用于CONFIG模式查找包(find_package)的cmake脚本,所以需要自己写</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_PREFIX_PATH /opt/libjpeg-turbo)</span><br><span class="line">find_package(PkgConfig REQUIRED)</span><br><span class="line">pkg_search_module(TURBOJPEG REQUIRED libturbojpeg)</span><br><span class="line">link_directories(<span class="variable">$&#123;TURBOJPEG_LIBDIR&#125;</span>)</span><br><span class="line">add_executable(tjexample tjexample.c)</span><br><span class="line">target_include_directories(tjexample PUBLIC <span class="variable">$&#123;TURBOJPEG_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">target_link_libraries(tjexample <span class="variable">$&#123;TURBOJPEG_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="labelrobomaster">LabelRobomaster</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libfuse2 <span class="comment">#22.04不再默认安装fuse</span></span><br></pre></td></tr></table></figure><h2 id="colmap">Colmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    git \</span><br><span class="line">    cmake \</span><br><span class="line">    build-essential \</span><br><span class="line">    libboost-program-options-dev \</span><br><span class="line">    libboost-filesystem-dev \</span><br><span class="line">    libboost-graph-dev \</span><br><span class="line">    libboost-system-dev \</span><br><span class="line">    libboost-test-dev \</span><br><span class="line">    libeigen3-dev \</span><br><span class="line">    libsuitesparse-dev \</span><br><span class="line">    libfreeimage-dev \</span><br><span class="line">    libmetis-dev \</span><br><span class="line">    libgoogle-glog-dev \</span><br><span class="line">    libgflags-dev \</span><br><span class="line">    libglew-dev \</span><br><span class="line">    qtbase5-dev \</span><br><span class="line">    libqt5opengl5-dev \</span><br><span class="line">    libcgal-dev</span><br><span class="line">    因为之前已经安装了所以只需要运行：</span><br><span class="line"></span><br><span class="line">git clone https://github.com/colmap/colmap.git</span><br><span class="line">cd colmap</span><br><span class="line">git checkout dev</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DQt5_DIR=/opt/homebrew/opt/qt@5/lib/cmake/Qt5</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="meshlab">meshLab</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 源码安装，弃用</span><br><span class="line">cd /home/outbreak/MVS/meshlab_folder/meshlab/scripts/Linux</span><br><span class="line">zsh 0_setup_env.sh --dont_install_qt # 已经安装了Qt</span><br><span class="line"># 直接登录https://www.meshlab.net/#download下载appImage</span><br><span class="line">    sudo apt install libfuse2</span><br></pre></td></tr></table></figure><h2 id="mve">MVE</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖：</span></span><br><span class="line"><span class="comment"># libjpeg (for MVE, http://www.ijg.org/)</span></span><br><span class="line"><span class="comment"># libpng (for MVE, http://www.libpng.org/pub/png/libpng.html)</span></span><br><span class="line"><span class="comment"># libtiff (for MVE, http://www.libtiff.org/)</span></span><br><span class="line"><span class="comment"># OpenGL (for libogl in MVE and UMVE)</span></span><br><span class="line"><span class="comment"># Qt 5 (for UMVE, http://www.qt.io)</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libjpeg-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libtiff-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libpng-devopenGL</span><br><span class="line">01--首先不可或缺的就是编译器与基本的函式库</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line">02--安装OpenGL Library</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgl1-mesa-dev</span><br><span class="line">03--安装OpenGL Utilities</span><br><span class="line">// OpenGL Utilities 是一组建构于 OpenGL Library 之上的工具组，</span><br><span class="line">// 提供许多很方便的函式，使 OpenGL 更强大且更容易使用</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libglu1-mesa-dev</span><br><span class="line">04--安装OpenGL Utility Toolkit</span><br><span class="line">// OpenGL Utility Toolkit 是建立在 OpenGL Utilities 上面的工具箱，</span><br><span class="line">// 除了强化了 OpenGL Utilities 的不足之外，也增加了 OpenGL 对于视窗介面支援。</span><br><span class="line"><span class="built_in">sudo</span> apt-get install freeglut3-dev</span><br><span class="line">最后</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To download and build MVE, type:</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/simonfuhrmann/mve.git</span><br><span class="line"><span class="built_in">cd</span> mve</span><br><span class="line">make -j8</span><br><span class="line"><span class="comment"># 将命令写在shell中才可以用其命令行运行</span></span><br><span class="line"><span class="comment"># 一共14个</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/bundle2pset:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/dmrecon:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/featurerecon:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/fssrecon:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/makescene:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/mesh2pset:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/meshalign:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/meshclean:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/meshconvert:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/prebundle:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/scene2pset:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/sceneupgrade:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/sfmrecon:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/outbreak/MVS/MVE_folder/mve/apps/umve:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UMVE是QT界面的GUI界面，没有UMVE就只能用命令行</span></span><br><span class="line"><span class="built_in">cd</span> apps/umve/</span><br><span class="line">qmake &amp;&amp; make -j8</span><br><span class="line">./umve</span><br><span class="line"><span class="comment"># 其运行的pipeline请看对应下的笔记</span></span><br></pre></td></tr></table></figure><h2 id="openmvs"><s>OpenMVS</s></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最后出现报错，所以未能安装成功</span></span><br><span class="line">需要：</span><br><span class="line">    Eigen version 3.4 or higher</span><br><span class="line">    OpenCV version 2.4 or higher</span><br><span class="line">    Ceres version 1.10 or higher (optional)</span><br><span class="line">    CGAL version 4.2 or higher</span><br><span class="line">    Boost version 1.56 or higher</span><br><span class="line">    VCG VCGLib（注意要安装2020年的版本，参考教程）</span><br><span class="line">    CUDA (optional)</span><br><span class="line">    GLFW (optional)</span><br><span class="line">运行：</span><br><span class="line"><span class="built_in">sudo</span> apt-get update -qq &amp;&amp; <span class="built_in">sudo</span> apt-get install -qq </span><br><span class="line"><span class="comment">#安装Eigen (必需) </span></span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.com/libeigen/eigen.git --branch 3.2 </span><br><span class="line"><span class="built_in">mkdir</span> eigen_build &amp;&amp; <span class="built_in">cd</span> eigen_build </span><br><span class="line">cmake . ../eigen make &amp;&amp; <span class="built_in">sudo</span> make install </span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line"><span class="comment">#安装Boost (必需) </span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libboost-iostreams-dev libboost-program-options-dev libboost-system-dev libboost-serialization-dev  </span><br><span class="line"><span class="comment">#安装OpenCV (必需) </span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libopencv-dev </span><br><span class="line"><span class="comment">#安装CGAL (必需) 是一个开源软件项目，以C++库的形式提供对高效可靠几何算法的轻松访问。CGAL用于各种需要几何计算的领域，如地理信息系统、计算机辅助设计、分子生物学、医学成像、计算机图形学和机器人。该库提供数据结构和算法，如三角图、Voronoi图、多边形和多面体的布尔运算、点集处理、曲线排列、曲面和体积网格生成、几何处理、阿尔法形状、凸包算法、形状重建、AABB和KD树</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libcgal-dev libcgal-qt5-dev  </span><br><span class="line"><span class="comment">#安装VCGLib (必需) 可视化与计算机图形库（简称VCG）是一个开源的可移植C++模板库，用于利用OpenGL对三角形和四面体网格进行操作、处理和显示。VCGLib使用github托管的git存储库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/cdcseacave/VCG.git VCG</span><br><span class="line"><span class="built_in">cd</span> VCG &amp;&amp; git <span class="built_in">log</span></span><br><span class="line">git reset --hard 88f12f212a1645d1fa6416592a434c29e63b57f0</span><br><span class="line">VCG库主要由头文件构成(核心部分完全是头文件)而不依赖额外的东西. 只需下载压缩包并解压到一个</span><br><span class="line">文件夹. 例如, 解压到命名为 vcg 的文件夹， 并且设置为编译器的 include 目录. 以后， 你只需要</span><br><span class="line">像 app/sample/ 中的例子那样包含你需要的头文件即可</span><br><span class="line"><span class="comment">#安装Ceres (可选) </span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install libatlas-base-dev libsuitesparse-dev </span><br><span class="line">git <span class="built_in">clone</span> https://ceres-solver.googlesource.com/ceres-solver ceres-solver </span><br><span class="line"><span class="built_in">mkdir</span> ceres_build &amp;&amp; <span class="built_in">cd</span> ceres_build </span><br><span class="line">cmake . ../ceres-solver/ -DMINIGLOG=ON -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF </span><br><span class="line">make -j2 &amp;&amp; <span class="built_in">sudo</span> make install </span><br><span class="line"><span class="built_in">cd</span> ..  </span><br><span class="line"><span class="comment">#安装GLFW3 (可选) </span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -y install freeglut3-dev libglew-dev libglfw3-dev  </span><br><span class="line"><span class="comment">#安装OpenMVS </span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/electech6/openMVS_comments.git openMVS </span><br><span class="line"><span class="comment">## OpenMVS的中文注释版</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/electech6/openMVS_comments</span><br><span class="line"><span class="built_in">mkdir</span> openMVS_build &amp;&amp; <span class="built_in">cd</span> openMVS_build </span><br><span class="line">cmake . ../openMVS -DCMAKE_BUILD_TYPE=Release -DVCG_ROOT=<span class="string">&quot;/home/outbreak/DriverCollection/VCG&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想生成共享库,可以在cmake加如下命令: </span></span><br><span class="line">-DBUILD_SHARED_LIBS=ON  </span><br><span class="line"><span class="comment">#生成 OpenMVS 库文件: </span></span><br><span class="line"><span class="built_in">sudo</span> make -j2 &amp;&amp; <span class="built_in">sudo</span> make install </span><br></pre></td></tr></table></figure><h2 id="openmvg">OpenMVG</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最后出现add_library cannot create imported target &quot;Qt5::QSvgIconPlugin&quot; because another target with the same name already exists，所以未能安装成功</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libpng-dev libjpeg-dev libtiff-dev libxxf86vm1 libxxf86vm-dev libxi-dev libxrandr-dev graphviz  </span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/openMVG/openMVG.git  &amp;&amp; <span class="built_in">cd</span> openMVG</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp;<span class="built_in">cd</span> build </span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=RELEASE ../src/ -DOpenMVG_BUILD_TESTS=ON </span><br><span class="line"><span class="built_in">sudo</span> cmake --build . --target install  </span><br><span class="line"><span class="comment"># test make test ctest --output-on-failure -j </span></span><br><span class="line"><span class="comment"># .bashrcexport PATH=$PATH:/home/work/tools/openMVG_Build/Linux-x86_64-RELEASE/</span></span><br></pre></td></tr></table></figure><h2 id="bundler">Bundler</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install liblapack-dev libblas-dev minpack-dev f2c gfortran jhead imagemagick</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libc6-dev-i386#一个用于编译和链接 C 程序的软件包,SIFT依赖</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/snavely/bundler_sfm.git</span><br><span class="line"><span class="built_in">cd</span> bundler_sfm</span><br><span class="line">make <span class="comment">#最后make[1]: Leaving directory</span></span><br><span class="line"><span class="comment">## 下载的SIFT程序，解压之后将里边的siftDemoV4/sift可执行文件拷贝到bundler_sfm下的bin目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将jhead文件拷贝到bundler_sfm下的bin目录下</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/bin/jhead bin/　</span><br><span class="line"><span class="comment">## 将bundler_sfm/bin/目录下生成的libANN_char.so文件拷贝到系统库</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> bin/libANN_char.so /usr/lib/　</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cmvs-pmvs">CMVS-PMVS</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    PMVS(patch-based multi-view stereo) 是 Yasutaka Furukama 博士写的已知由一组图片和图片对应的相机参数生成 dense reconstruction (稠密的三维模型)的算法。</span><br><span class="line">    CMVS(Clustering Views <span class="keyword">for</span> Multi-view Stereo) 是 PMVS 的改进版，里面包含PMVS。</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgtk2.0-dev libdevil-dev libboost-all-dev libatlas-cpp-0.6-dev libatlas-dev libcminpack-dev libgfortran3 libmetis-edf-dev libparmetis-dev freeglut3-dev libgsl0-dev</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pmoulon/CMVS-PMVS.git</span><br><span class="line"><span class="built_in">cd</span> CMVS-PMVS/program/</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="comment">## 生成的可执行文件位于build目录下的main目录中。为了接下来运行方便，我们将生成的可执行文件cmvs、genOption、pmvs2这三个文件拷贝到bundler_sfm目录的bin下</span></span><br></pre></td></tr></table></figure><h2 id="node-js">Node.js</h2><p>官网没有apt安装，实际上有。但是安装出来的不是最新的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y nodejs</span><br></pre></td></tr></table></figure><p>Hexo需要14以下版本才能正常显示localhost</p><p>要安装制定版本在官网下载tar文件node-v20.18.0-linux-x64.tar.xz</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接解压到 /usr/local/ 目录</span></span><br><span class="line"><span class="built_in">sudo</span> tar -xvf node-v14.18.0-linux-x64.tar.xz -C /usr/local/</span><br><span class="line"><span class="comment"># nodejs下bin目录是否有node 和npm文件</span></span><br><span class="line"><span class="comment"># 在zsh下</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/node-v14.18.0-linux-x64/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 建立符号链接</span></span><br><span class="line"><span class="built_in">cd</span> node-v14.18.0-linux-x64</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s ./bin/npm /usr/local/bin/ </span><br><span class="line"><span class="built_in">ln</span> -s ./bin/node /usr/local/bin/</span><br><span class="line"><span class="comment"># 安装完成</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>不知道怎么了失败了，于是决定nvm安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br><span class="line"><span class="comment"># zsh中</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment"># 下载并安装 Node.js（可能需要重启终端）</span></span><br><span class="line">nvm install 22</span><br><span class="line">nvm use 22</span><br><span class="line"><span class="comment"># 验证环境中是否存在正确的 Node.js 版本</span></span><br><span class="line">node -v <span class="comment"># 应该打印 `v22.11.0`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证环境中是否存在正确的 npm 版本</span></span><br><span class="line">npm -v <span class="comment"># 应该打印 `10.9.0`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逝世使用nvm下载hexo</span></span><br><span class="line"></span><br><span class="line">npm uninstall -g hexo-cli</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ssh-服务器">SSH 服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户名 houbosen</span><br><span class="line">密码 Xw2dAOgsBk</span><br><span class="line">端口 1938 </span><br><span class="line">14号机ip 10.68.154.94</span><br></pre></td></tr></table></figure><h2 id="疑难杂症解决">疑难杂症解决</h2><ol><li>ssh connection refused</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install openssh-server </span><br><span class="line"><span class="built_in">sudo</span> apt install openssh-client</span><br></pre></td></tr></table></figure><ol start="2"><li>ssh permission denied</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有没有可能你们两个的静态IP一样</span><br></pre></td></tr></table></figure><ol start="3"><li>From 192.168.50.6 icmp_seq=1 Destination Host Unreachable</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><ol start="4"><li>/usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to <code>pango_attr_insert_hyphens_new' /usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to </code>pango_attr_overline_new’<br>/usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to <code>pango_coverage_get_type' /usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to </code>pango_item_apply_attrs’<br>/usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to <code>cairo_tag_end' /usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to </code>pango_attr_list_update’<br>/usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to <code>pango_show_flags_get_type' /usr/bin/ld: /lib/x86_64-linux-gnu/librsvg-2.so.2: undefined reference to </code>cairo_svg_surface_get_document_unit’<br>爆了一堆librsvg找不到pango和cairo的包，然后重新装</li></ol><p>不知道会出什么问题，所以想直接冲了,</p><p>sudo apt remove librsvg2-2:amd64</p><p>sudo apt remove  librsvg2-common:amd64</p><p>sudo apt remove librsvg2-bin</p><p>sudo apt install librsvg2-2:amd64</p><p>sudo apt  install  librsvg2-common:amd64</p><p>sudo apt install librsvg2-bin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Environment Installition&lt;/h1&gt;
&lt;p&gt;20241101&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;python3-8&quot;&gt;&lt;s&gt;Python3.8&lt;/s&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="配置环境" scheme="http://outbreak-sen.github.io/categories/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
    
  </entry>
  
  <entry>
    <title>pyQT的安装和使用</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/pyQT%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/pyQT%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2025-02-09T07:21:26.000Z</published>
    <updated>2025-02-10T05:03:19.578Z</updated>
    
    <content type="html"><![CDATA[<h1>PyQT的安装和使用</h1><p>pyQT的安装不需要在官网下载QT安装包，只需要创建conda环境然后pip安装，安装pyQT5-tools之后会安装QT designer，然后就可以可视化设计一个UI，然后通过Pyuic工具就可以转化为一个py文件，这个py文件就是整个工程，py文件中有一个class包含了整个UI设计，然后只需要编辑py文件中这个class的功能即可，编辑子函数。<br>(这个文档非常好)[<a href="https://www.w3ccoo.com/pyqt5/index.html">https://www.w3ccoo.com/pyqt5/index.html</a>]</p><h2 id="vscode-pyqt-installation">VScode+pyQT installation</h2><ol><li><p>安装PyQt</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure><p>vscode安装PYQT Integration便于使用pyqt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pyqt-integration &gt; Qtdesigner: Path</span></span><br><span class="line">\venv_QT\Lib\site-packages\qt5_applications\Qt\bin\designer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pyqt-integration &gt; Pyuic: Cmd 用于转化ui格式为py</span></span><br><span class="line">\venv_QT\Scripts\pyuic5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pyqt-integration &gt; Pyuic &gt; Compile: Filepath</span></span><br><span class="line">默认是将ui转化好的py文件存在当前目录的ui文件夹下</span><br></pre></td></tr></table></figure></li><li><p>使用Pyuic工具，将 .ui文件转换为 .py文件。</p><ul><li><p>在文件夹栏空白处点击右键点击「PYQT: New Form」启动Qt Designer软件</p></li><li><p>「文件 &gt; 另存为」，把所设计的 .ui文件保存到项目目录下</p></li><li><p>右击 xxx.ui文件「PYQT: Compile Form」调用Pyuic工将 xxx.ui文件转换为 xxx_Ui.py文件，是可以相互转化的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-x 开关向生成的 Python 脚本（来自 XML）添加了少量附加代码，使其成为可自执行的独立应用程序。</span></span><br><span class="line">pyuic5 -x input.py -o output.ui</span><br><span class="line">python -m PyQt6.uic.pyuic -x register.ui -o register.py</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>对GUI界面进行修改和调整。在文件夹栏的 .ui文件右击，点击「PYQT: Edit in Designer」，即可启动Qt Designer对GUI界面进行编辑。</p></li><li><p>编辑完成后保存并退出Qt Designer，对.ui文件右击，点击「PYQT: Compile Form」，重新更新一次 xxx_Ui.py文件即可。</p></li></ul><ol start="3"><li><p>使用python编程，调用GUI界面的 .py文件，编写GUI界面各组件的绑定事件函数，如点击某按钮时触发某函数，实现某功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">import</span> matchingNetworkDesigner_Ui <span class="comment"># import GUI的.py文件 </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> app = QApplication(sys.argv) </span><br><span class="line">MainWindow = QMainWindow() </span><br><span class="line">ui = matchingNetworkDesigner_Ui.Ui_MainWindow()<span class="comment"># ui=GUI的py文件名.类名</span></span><br><span class="line"> ui.setupUi(MainWindow)</span><br><span class="line"> ui.L_PB_cal.clicked.connect(L_cal) <span class="comment"># 把函数绑定GUI的按钮的点击事件。</span></span><br><span class="line"> ui.L_PB_reset.clicked.connect(L_reset)<span class="comment"># 按钮名字「L_PB_cal」和「L_PB_reset」在Qt Designer中定义。</span></span><br><span class="line"> MainWindow.show()</span><br><span class="line"> sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></li></ol><h2 id="pyqt-include">PyQT include</h2><table><thead><tr><th>PyQT的模块组成</th><th>其余就是和web，sql，opengl等一些相关的，用不着</th></tr></thead><tbody><tr><td>QtCore</td><td>其他模块使用的核心非 GUI 类</td></tr><tr><td>QtGui</td><td>图形用户界面组件</td></tr><tr><td>QtXml</td><td>处理 XML 的类</td></tr><tr><td>QtWidgets</td><td>用于创建经典桌面样式 UI 的类。</td></tr><tr><td>QtDesigner</td><td>用于扩展 Qt Designer 的类</td></tr></tbody></table><table><thead><tr><th>PyQt5-tools的组成</th><th>其余不用看的</th></tr></thead><tbody><tr><td>assistantQt Assistant</td><td>文档工具</td></tr><tr><td>pyqt5designerQt Designer GUI</td><td>布局工具</td></tr><tr><td>linguist Qt Linguist</td><td>翻译工具</td></tr><tr><td>qmake Qt</td><td>软件构建工具</td></tr><tr><td>pyuic5</td><td>用于从 ui 文件生成代码的 Qt 用户界面编译器</td></tr></tbody></table><h2 id="pyqt-basic-class">PyQT Basic Class</h2><ul><li>QObject 是所有 Qt 对象的基类</li><li>QPaintDevice类是所有可绘制对象的基类。</li><li>QWidget类，派生自 QObject 和 QPaintDevice 类，是所有用户界面对象的基类。一般QWidget就是初始的大页面</li><li>QApplication类管理 GUI 应用程序的主要设置和控制流程包含主事件循环，其实就控制每个页面的关闭开启</li><li>QMainWindow基于 GUI 的应用程序的顶级窗口是由 <strong>QMainWindow</strong> 小部件对象创建的</li></ul><h2 id="qt信号与插槽">QT信号与插槽</h2><p>每个派生自 QObject 类的 PyQt 小部件都可以发出 <strong>“信号”</strong> 以响应一个或多个事件。信号是一个小部件的成员函数，比如点击click（）。信号&quot;连接connect&quot;到一个&quot;插槽function&quot;。 插槽可以是任何可调用的 Python 函数。</p><ul><li><p>可以使用qt designer的Signal/Slot 编辑器（或按 F4）直接添加</p></li><li><pre><code class="language-python">widget.signal.connect(slot_function)button.clicked.connect(slot_function)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 布局管理</span><br><span class="line"></span><br><span class="line">### 绝对布局</span><br><span class="line"></span><br><span class="line">* 设置一个大画面setGeometry(10,10,300,200)，然后里面的button位于move(50,2)</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def window():</span><br><span class="line">   app = QtGui.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">   w = QtGui.QWidget())    </span><br><span class="line">   w.setGeometry(10,10,300,200)</span><br><span class="line">   w.setWindowTitl</span><br><span class="line"></span><br><span class="line">   b = QtGui.QPushButton(w)</span><br><span class="line">   b.setText(&quot;Hello World!&quot;)</span><br><span class="line">   b.move(50,20e(“PyQt”)</span><br><span class="line"></span><br><span class="line">   w.show()</span><br><span class="line">   sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">   window()</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="相对布局">相对布局</h3><ul><li><p>QBoxLayout垂直或水平排列</p><ul><li><p>addWidget()将小部件添加到</p></li><li><p>addStretch()创建空的可拉伸框</p></li><li><p>addLayout()添加另一个嵌套布局</p></li><li><p>vbox = QVBoxLayout()，最后要win.setLayout(vbox)</p></li></ul></li><li><p>QGridLayout以行和列排列</p></li><li><p>QFormLayout创建两列表单</p></li></ul><h2 id="qt组件">qt组件</h2><ul><li><p><a href="https://www.w3ccoo.com/pyqt5/pyqt5_qlabel_widget.html">QLabel</a></p></li><li><p><a href="https://www.w3ccoo.com/pyqt5/pyqt5_qlineedit_widget.html">QLineEdit</a></p></li><li><p><a href="https://www.w3ccoo.com/pyqt5/pyqt5_qpushbutton_widget.html">QPushButton</a></p></li></ul><h2 id="多页面">多页面</h2><p>不止一个界面，如何弹出界面并多页面操作</p><h3 id="简单的提示界面">简单的提示界面</h3><ul><li><p>QDialog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">window</span>():</span><br><span class="line">   app = QApplication(sys.argv)</span><br><span class="line">   w = QWidget()</span><br><span class="line">   btn = QPushButton(w)</span><br><span class="line">   btn.clicked.connect(showdialog)</span><br><span class="line">   w.setWindowTitle(<span class="string">&quot;PyQt Dialog demo&quot;</span>)</span><br><span class="line">   w.show()</span><br><span class="line">   sys.exit(app.exec_())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showdialog</span>():</span><br><span class="line">   dlg = QDialog()</span><br><span class="line">   b1 = QPushButton(<span class="string">&quot;ok&quot;</span>,dlg)</span><br></pre></td></tr></table></figure></li><li><p>QMessageBox</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">window</span>():</span><br><span class="line">   app = QApplication(sys.argv)</span><br><span class="line">   w = QWidget()</span><br><span class="line">   b = QPushButton(w)</span><br><span class="line">   b.clicked.connect(showdialog)</span><br><span class="line">   w.setWindowTitle(<span class="string">&quot;PyQt MessageBox demo&quot;</span>)</span><br><span class="line">   w.show()</span><br><span class="line">   sys.exit(app.exec_())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showdialog</span>():</span><br><span class="line">   msg = QMessageBox()</span><br><span class="line">   msg.setIcon(QMessageBox.Information)</span><br></pre></td></tr></table></figure></li></ul><h3 id="真正的多页面">真正的多页面</h3><ul><li><p>SDI 单文档接口：显示多个独立的窗口。 这需要更多的内存资源。</p></li><li><p>MDI 多文档接口 ：子窗口相对于彼此放置在主容器内。 容器小部件称为 QMdiArea。</p></li></ul><p>QMdiArea 小部件一般占据 QMainWondow 对象的中心小部件。 该区域中的子窗口是 <strong>QMdiSubWindow</strong> 类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">   count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent = <span class="literal">None</span></span>):</span><br><span class="line">      <span class="built_in">super</span>(MainWindow, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">      <span class="variable language_">self</span>.mdi = QMdiArea()</span><br><span class="line">      <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;MDI demo&quot;</span>)</span><br><span class="line">      <span class="variable language_">self</span>.setCentralWidget(<span class="variable language_">self</span>.mdi)</span><br><span class="line">      bar = <span class="variable language_">self</span>.menuBar()</span><br><span class="line"></span><br><span class="line">      file = bar.addMenu(<span class="string">&quot;File&quot;</span>)</span><br><span class="line">      file.addAction(<span class="string">&quot;New&quot;</span>)</span><br><span class="line">      file.triggered[QAction].connect(<span class="variable language_">self</span>.windowaction)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">windowaction</span>(<span class="params">self, q</span>): <span class="comment"># 多个menu摁键传入参数</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&quot;triggered&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> q.text() == <span class="string">&quot;New&quot;</span>:</span><br><span class="line">         MainWindow.count = MainWindow.count+<span class="number">1</span></span><br><span class="line">         sub = QMdiSubWindow()</span><br><span class="line">         sub.setWidget(QTextEdit())</span><br><span class="line">         sub.setWindowTitle(<span class="string">&quot;subwindow&quot;</span>+<span class="built_in">str</span>(MainWindow.count))</span><br><span class="line">         <span class="variable language_">self</span>.mdi.addSubWindow(sub)</span><br><span class="line">         sub.show()</span><br></pre></td></tr></table></figure><h2 id="面向对象地制作gui">面向对象地制作GUI</h2><h1>QSS</h1><p><a href="https://doc.qt.io/qt-5/stylesheet-reference.html">Qt Style Sheets Reference</a></p><p><a href="https://doc.qt.io/qt-5/stylesheet-examples.html">Qt Style Sheets ExamplesQt 官方例子</a></p><p>Qt样式表（以下统称QSS）的术语和语法规则几乎和CSS相同。</p><ul><li><p>类似CSS，QSS每一条都是由一个选择器和一组声明构成：</p><ul><li><p>选择器选出要对哪种控件进行样式修改，</p></li><li><p>每个声明都是键值对，键为属性，值为属性值</p></li></ul></li></ul><h2 id="设置方法">设置方法</h2><ol><li><p>局部设置，用setStyleSheet(QSS)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label1 = QLabel(<span class="string">&#x27;标签1&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">label1.setStyleSheet(<span class="string">&#x27;background-color:green;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">btn2 = QPushButton(<span class="string">&#x27;按钮2&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">btn2.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">btn2.resize(<span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">#局部设置</span></span><br><span class="line">btn1.setStyleSheet(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    QPushButton&#123;</span></span><br><span class="line"><span class="string">        color:red;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    QPushButton:hover&#123;</span></span><br><span class="line"><span class="string">        background-color: green;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>全局设置，把所有的buttun之类的都设置好QSS，然后直接对Mainwindow进行加载</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = Window()</span><br><span class="line">    QssStyle = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            QPushButton:hover&#123;</span></span><br><span class="line"><span class="string">                    background-color: green;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            QPushButton[name=&quot;btn&quot;]:hover&#123;</span></span><br><span class="line"><span class="string">                    background-color: red;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            QPushButton#btn:hover&#123;</span></span><br><span class="line"><span class="string">                    background-color: green;</span></span><br><span class="line"><span class="string">                    color:red;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># # 全局设置</span></span><br><span class="line">    window.setStyleSheet(QssStyle)  <span class="comment"># 当前窗口全局有效</span></span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></li></ol><p>为降低耦合，往往把QSS写在一个单独的style.qss文件中，然后在main.py的QApplication或QMainWindow中加载样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">QPushButton &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555555</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;&#125;QPushButton<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#666666</span>;&#125;QProgressBar &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#444444</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;&#125;QProgressBar::chunk &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#777777</span>;&#125;QSlider &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#444444</span>;&#125;QSlider::handle:horizontal &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#666666</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">3px</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载QSS样式的方法</span></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">window = MainWindow()</span><br><span class="line"></span><br><span class="line">style_file = <span class="string">&#x27;./style.qss&#x27;</span></span><br><span class="line">style_sheet = QSSLoader.read_qss_file(style_file)</span><br><span class="line">window.setStyleSheet(style_sheet)</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="qt-material">Qt-material</h2><p>一个github开源，可以快速设置所有的qss。还有很多其他的快速设置qss的库GTRONICK-QSS，飞扬青云-QSS，QDarkStyleSheet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install qt-material</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用例子</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> qt_material <span class="keyword">import</span> apply_stylesheet</span><br><span class="line"></span><br><span class="line">app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">window = QtWidgets.QMainWindow()</span><br><span class="line"></span><br><span class="line">apply_stylesheet(app, theme=<span class="string">&#x27;dark_teal.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line">app.exec_()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;PyQT的安装和使用&lt;/h1&gt;
&lt;p&gt;pyQT的安装不需要在官网下载QT安装包，只需要创建conda环境然后pip安装，安装pyQT5-tools之后会安装QT designer，然后就可以可视化设计一个UI，然后通过Pyuic工具就可以转化为一个py文件，这个py文件就</summary>
      
    
    
    
    <category term="配置环境" scheme="http://outbreak-sen.github.io/categories/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="QT" scheme="http://outbreak-sen.github.io/tags/QT/"/>
    
    <category term="python" scheme="http://outbreak-sen.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我的博客搭建过程和使用</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2025-02-09T07:21:26.000Z</published>
    <updated>2025-02-09T07:37:39.677Z</updated>
    
    <content type="html"><![CDATA[<h1>我的博客搭建过程和使用</h1><h1>搭建过程</h1><h2 id="基础hexo搭建方法">基础Hexo搭建方法</h2><ol><li><p>安装 Node.js与git</p><p>Node.js 是一个开源的、跨平台的 JavaScript 运行环境</p></li><li><p>安装 Hexo和butterfly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> 你要创建站点的目录</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly <span class="comment">#主题要在theme里，可以魔改</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save <span class="comment"># pug以及stylus的渲染器</span></span><br><span class="line">npm i hexo-theme-butterfly <span class="comment">#在博客的文件夹下</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个github的page，需要创建“<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”仓库，具体搜一下</p><p>这个github page只用于保存生成好的html文件，并不保存博客的原始文件，所以还是创建了一个远程仓库用于保存博客原始文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后改一下config.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:outbreak-sen/outbreak-sen.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用butterfly主题">使用butterfly主题</h2><p>参考<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly的github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p><strong>修改配置文件 config.yml 中的 theme 项为 butterfly，之后也不要编辑config文件了，测试不好使，只编辑_configbutterfly.yml！！！！！</strong></p><p>然后就可以编辑config文件进行美化，这边对config文件进行了注释，然后方便改动</p><h2 id="目录说明">目录说明</h2><p>博客的文件目录和说明如下</p><ul><li>img： 作用未知，往里面存图片没有用啊</li><li>node_modules：nodejs的插件安装位置</li><li>public：编译好的网页将保存在此处，每次hexo clean的时候只更新这里</li><li>scaffolds：保存博客的不同layout，比如post，draft，page的layout，还有其他的layout比如categories，tags是默认的</li><li>source：博客<ul><li>_data：</li><li>_post：这里面是重要的博客单页，每个博客都有标题和兴趣tag，在生成的时候自动分类，不用自己分类到文件夹</li><li>_about：<a href="http://xn--pageindex-u75noo530lef1au11cboxeesg.md">这里就是一个page的index.md</a>，page的layout是&quot;about&quot;，里面是自己的介绍</li><li>archives：按照时间轴进行分类，<a href="http://xn--pageindex-u75noo530lef1au11cboxeesg.md">这里就是一个page的index.md</a>，page的layout是&quot;archives&quot;，不用管，有这个就可以看到分类页</li><li>categories：按照分类进行分类，<a href="http://xn--pageindex-u75noo530lef1au11cboxeesg.md">这里就是一个page的index.md</a>，page的layout是&quot;categories&quot;</li><li>tags：按照兴趣进行分类，<a href="http://xn--pageindex-u75noo530lef1au11cboxeesg.md">这里就是一个page的index.md</a>，page的layout是&quot;tags&quot;</li><li>shuoshuo：需要创建一个对应名称为shuoshuo的tag，然后就可以在此处看到</li><li><strong>这里的每个文件夹本身是不编译的，但是如果在config文件中编写同名目录则网页出现对应目录链接，<a href="http://xn--index-bi1hm7qypbha324cpt1bp2kr5hc03bssb98rxpmda52r3v7rhnrau0z3nx.md">然后点击进链接首先出现的是该目录下的index.md</a>。如果要创建一个图库，则index里编写图如何摆放即可，如果创建一个tegs分类，则index里把type改为tags则自动进入一个按照tag分类的界面。关于笔者，即about页面，其实也是一个page，然后设置好layout为about</strong></li></ul></li><li>themes：<ul><li>butterfly：里面的img目录为主页，人像等配置的默认目录</li></ul></li></ul><h3 id="图片修改">图片修改</h3><p>图片在<code>/themes/butterfly/source/img</code>更改，如果想要纯透明的，可以用png格式的图片,将jpg格式的图片转换为png格式的图片，然后在图片编辑软件中将透明度调成0.0~0.9之间，然后保存为png格式的图片。</p><h3 id="如何优雅插入博客图片">如何优雅插入博客图片</h3><p>有两类图需要插入，一种是博客搭建使用的图片，比如个人头像，背景图像等，另一种是博客中需要插入的图。</p><p>对于第一种，可以创建一个img目录直接插入图像，知否不会改动。或者直接插入到/themes/butterfly/source/img这个目录下，这样编写的路径比较好看但是因为这样插入的是theme文件夹，破坏了原先的主题文件夹，所以我不喜欢。（站点根目录是站点目录的source文件夹里）</p><p>对于第二种，优雅的方法是为每一个文章创建一个资源文件夹，将图片保存其中</p><ul><li>在博客根目录打开<code>_config.yml</code>文件做如下修改： <code>yaml post_asset_folder: true</code></li><li>然后使用<code>hexo n text</code>命令后创建一个使用post布局名为text的文章，你将发现hexo在<code>\source\_post</code>文件夹下创建了一个<code>\text</code>文件夹以及同名的<code>.md</code>文件：</li><li>使用<a href="https://link.zhihu.com/?target=https%3A//www.typora.io/">Typora</a>编辑器，可以在编辑器的文件/偏好设置/图像中进行如下设置：插入图片时：选择复制到制定路径：./${filename}/</li></ul><h3 id="目录和类型">目录和类型</h3><p>每个博客有两个属性，tag指的是内容涉及的话题，categories是指post的分类</p><ul><li><p>博客顶部的Front-matter是保存文章信息的地方，里面写明了文章创建的时间，标签，名字，也可以加入，分类，更改日期，评论系统是否开启等</p></li><li><p>在scaffolds目录下有多个layout文件，<a href="http://xn--draft-dq1hn287awd6a.md">默认为draft.md</a>， <a href="http://page.md">page.md</a>，post.md三个，对应创建博客时候的layout，也对应每个创建的md博客顶部的layout。</p><ul><li><p>所谓page，就是点击一个单页，比如点击categories的时候出现的index.md就是一个page，点击图库出现的收藏了一堆图片的单页就是page</p></li><li><p>使用 <code>draft</code> 布局建立的文章，其博客文章 <code>md</code> 源码位于 <code>source/_drafts</code> 路径下， <code>hexo generate</code> 不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署发布到博客网站上。Hexo提供了一个预览的方法，就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft</span><br><span class="line">hexo publish aaa <span class="comment">#将aaa.md的草稿发布为博客，其中aaa是文章名，不包含.md后缀，该命令的原理也不过是将文章从/source/_drafts移动到/source/_posts而已</span></span><br></pre></td></tr></table></figure></li></ul></li><li><pre><code class="language-yml"># 目录图案menu:  主页: / || fas fa-home  博文 || fa fa-graduation-cap:    分类: /categories/ || fa fa-archive    时间轴: /archives/ || fa fa-folder-open  生活 || fas fa-list:    学习笔记: /shuoshuo/ || fa fa-comments-o    相册: /photos/ || fa fa-camera-retro    影视鉴赏: /movies/ || fas fa-video  关于笔者: /about/ || fas fa-heart# 菜单项后面的 fas fa-home、fa fa-graduation-cap 等是 Font Awesome 图标 的类名，用于在菜单项旁边显示对应的图标。https://fontawesome.com/icons# 在 Butterfly 主题的 _config.yml 中，确保以下配置为 true# fas fa-home：表示一个“家”图标，通常用于“主页”菜单项。# fa fa-graduation-cap：表示一个“毕业帽”图标，通常用于“博文”或“文章”相关的菜单项。# fas fa-list：表示一个“列表”图标，通常用于“生活”或“分类”菜单项。# fas fa-heart：表示一个“心形”图标，通常用于“关于笔者”或“喜欢”菜单项。# fas：表示 Solid 风格（实心图标）。# far：表示 Regular 风格（空心图标）。# fab：表示 Brand 风格（品牌图标，如 GitHub、Twitter 等）。</code></pre></li><li><p>Front-matter示例如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 博客配置指南</span><br><span class="line"><span class="built_in">date</span>: 2023-10-01 14:00:00</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Butterfly</span><br><span class="line">categories:</span><br><span class="line">  - 技术</span><br><span class="line">cover: /img/hexo-cover.jpg</span><br><span class="line">top_img: /img/hexo-top.jpg</span><br><span class="line">description: 本文介绍了如何配置 Hexo 和 Butterfly 主题。</span><br><span class="line">---</span><br><span class="line"><span class="comment">## 引言</span></span><br><span class="line">Hexo 是一个快速、简洁且高效的博客框架...</span><br><span class="line"></span><br><span class="line"><span class="comment">## 正文</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h1>使用方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span> <span class="comment">#创建一个post类型（layout默认为post）的md文档</span></span><br><span class="line">hexo new [layout_name] <span class="string">&quot;post&quot;</span> <span class="comment">#创建一个layout类型的md</span></span><br><span class="line">hexo server <span class="comment"># 启用本地测试部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server <span class="comment">#删除本地缓存并进行本地测试部署</span></span><br><span class="line">hexo generate <span class="comment">#生成静态文件</span></span><br><span class="line">hexo deploy <span class="comment">#部署到远端，过一会起作用</span></span><br></pre></td></tr></table></figure><h1>config文件的示例</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">部落格</span> <span class="string">of</span> <span class="string">outbreak_sen</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (开启打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務,如果没有弹出就等一会</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 如果有英文逗号&#x27; , &#x27;,请使用转义字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 开头不允許转义字元，如需要，请把整個句子用双引号包住</span></span><br><span class="line">  <span class="comment"># 如果关闭打字效果，subtitle只会现示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">你在抱怨什么呢</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">为明天到来的事，说人生像是没有意义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">没有选择会是唯一的路</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">这不是你自己的问题，人终归要好好去生活</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;an interesting man&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">outbreak_sen</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://outbreak-sen.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment"># 导航栏</span></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="comment"># 导航栏 Logo 图片</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="string">/img/h_beautygirl.png</span></span><br><span class="line">  <span class="comment"># 是否显示标题</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否固定导航栏</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整侧边栏出现位置</span></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># left or right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人信息</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/outbreak-sen</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fa fa-book-open:</span> <span class="string">https://blog.csdn.net/outbreakrmb</span> <span class="string">||</span> <span class="string">CSDN</span></span><br><span class="line">  <span class="attr">fab fa-qq:</span> <span class="number">1023786231</span> <span class="string">||</span> <span class="string">QQ</span></span><br><span class="line"><span class="comment"># 个人头像设置</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># 头像图片链接</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">./img/head.png</span></span><br><span class="line">  <span class="comment"># 是否启用头像效果头像会一直转圈</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">博文</span> <span class="string">||</span> <span class="attr">fa fa-graduation-cap:</span></span><br><span class="line">    <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span><br><span class="line">    <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">生活</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="string">树洞:</span> <span class="string">/shuoshuo/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera-retro</span></span><br><span class="line">    <span class="string">作品与鉴赏:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">关于笔者:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码块</span></span><br><span class="line"><span class="attr">code_blocks:</span></span><br><span class="line">  <span class="comment"># 代码块主题: darker / pale night / light / ocean / false</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">pale</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># 是否使用 Mac 风格</span></span><br><span class="line">  <span class="attr">macStyle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 代码块高度限制（单位: px）</span></span><br><span class="line">  <span class="attr">height_limit:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否自动换行</span></span><br><span class="line">  <span class="attr">word_wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 代码块工具栏</span></span><br><span class="line">  <span class="comment"># 是否显示复制按钮</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否显示语言标签</span></span><br><span class="line">  <span class="attr">language:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true: 收缩代码块 | false: 展开代码块 | none: 展开代码块并隐藏按钮</span></span><br><span class="line">  <span class="attr">shrink:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否显示全屏显示代码块按钮</span></span><br><span class="line">  <span class="attr">fullpage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制的内容后面加上版权信息</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启网站复制权限</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="comment"># 复制的内容后面加上版权信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否开启复制版权信息添加</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span> <span class="comment"># 字数限制，当复制文字大于这个字数限制时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关文章，在文章最下面出现推送</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 各种图片</span></span><br><span class="line"><span class="comment"># 图片格式: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="comment"># Favicon（网站图）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/h_beautygirl.png</span></span><br><span class="line"><span class="comment"># 禁用所有横幅图片</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 创建博客单页的时候是否创建一个同名文件夹用于存放图片</span></span><br><span class="line"><span class="attr">yaml post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 当没有在front-matter设置top_img和cover的情况下会显示该图，要不然就是每个文章制定的图</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># title: Hello World        # 标题</span></span><br><span class="line"><span class="comment"># tags: [hello]             # 标签</span></span><br><span class="line"><span class="comment"># categories:               # 分类</span></span><br><span class="line"><span class="comment"># description: hello word~  # 描述</span></span><br><span class="line"><span class="comment"># top_img: /img/hello-1.png # 顶部背景图</span></span><br><span class="line"><span class="comment"># cover: /img/hello-1.png   # 文章封面</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># 文章详情页的顶部图片</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/img/h_beautygirl.png</span></span><br><span class="line"><span class="comment"># 主页封面</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/h_beautygirl.png</span></span><br><span class="line"><span class="comment"># 归档页顶部图片</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">/img/h_beautygirl.png</span></span><br><span class="line"><span class="comment"># 标签页顶部图</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">这也是一个测试:</span> <span class="string">/img/head.png</span></span><br><span class="line"><span class="comment"># 为每个标签设置横幅图片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 标签名: 图片链接</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"><span class="comment"># category页顶部图</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"><span class="comment"># 分类页的横幅图片，可以为每个分类设置横幅图片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 分类名: 图片链接</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"><span class="comment"># 页脚的背景图片</span></span><br><span class="line"><span class="attr">footer_img:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 网站背景</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">/img/v_beautygirl0.jpeg</span></span><br><span class="line"><span class="comment"># 无法显示的图</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">./img/friend_404.gif</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"><span class="comment"># 图片没加载出来的时候，出现一个动图转转转的文章页样式</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/img/s_beautygirl0.jpeg</span></span><br><span class="line"><span class="comment"># 图片大图查看</span></span><br><span class="line"><span class="attr">medium_zoom:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 简单的 404 页面</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="comment"># 是否启用 404 页面</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 404 页面的副标题</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;Page Not Found&quot;</span></span><br><span class="line">  <span class="comment"># 404 页面的卡片背景图片</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给文章结尾设置打赏按钮，可以放上收款二维码</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># toc 目录</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">true</span> <span class="comment"># 是否展开</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖动特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠标点击效果:萤火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠标点击效果: 爱心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">syntax_highlighter:</span> <span class="string">highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&quot;mtime&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:outbreak-sen/outbreak-sen.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>使用其他域名</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;我的博客搭建过程和使用&lt;/h1&gt;
&lt;h1&gt;搭建过程&lt;/h1&gt;
&lt;h2 id=&quot;基础hexo搭建方法&quot;&gt;基础Hexo搭建方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 Node.js与git&lt;/p&gt;
&lt;p&gt;Node.js 是一个开源的、跨平台的 JavaScript 运行环</summary>
      
    
    
    
    <category term="配置环境" scheme="http://outbreak-sen.github.io/categories/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="Hexo" scheme="http://outbreak-sen.github.io/tags/Hexo/"/>
    
    <category term="Hexo-butterfly" scheme="http://outbreak-sen.github.io/tags/Hexo-butterfly/"/>
    
    <category term="nodejs" scheme="http://outbreak-sen.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>QT的不同开发方式</title>
    <link href="http://outbreak-sen.github.io/2025/02/09/QT%E7%9A%84%E4%B8%8D%E5%90%8C%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/"/>
    <id>http://outbreak-sen.github.io/2025/02/09/QT%E7%9A%84%E4%B8%8D%E5%90%8C%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/</id>
    <published>2025-02-09T07:17:22.000Z</published>
    <updated>2025-02-09T08:44:22.655Z</updated>
    
    <content type="html"><![CDATA[<h1>QT 的不同开发方式</h1><p>[TOC]</p><h1>QT的简要介绍</h1><ul><li><p>用类套壳的UI库，同时还提供了一些IDE，UI编辑工具等。</p></li><li><p>同时QT的库中还有3D，图像处理，SQL数据库，音频处理，多线程等多个库，可以替代opencv，opengl做一些开发。</p></li><li><p>可以开发多个平台的软件，同时可以实现在一个平台开发后可以用于其他平台，平台包括安卓，嵌入式，桌面开发</p></li></ul><h1>QT Creator-QT提供的IDE</h1><p>Qt Creator 是 Qt 官方提供的集成开发环境（IDE），支持多种开发方式。</p><ul><li><strong>多语言支持</strong>：支持 C++、QML、Python 等语言。</li><li><strong>集成工具</strong>：包含代码编辑器、调试器、UI 设计器、版本控制等功能。</li><li><strong>跨平台</strong>：支持 Windows、Linux、macOS。</li></ul><h1>QT Designer-QT提供的UI编辑器</h1><p>Qt Designer 是一个可视化工具，用于设计 Qt 应用程序的用户界面。它生成 <code>.ui</code> 文件，可以与 C++、Python 等语言结合使用。</p><ul><li><strong>拖拽式设计</strong>：通过拖拽控件快速构建 UI。</li><li><strong>生成 <code>.ui</code> 文件</strong>：<code>.ui</code> 文件是 XML 格式的界面描述文件，可以在代码中动态加载。</li><li><strong>与代码结合</strong>：通过 <code>uic</code> 工具将 <code>.ui</code> 文件转换为 C++ 或 Python 代码。</li></ul><h1>C++开发方式</h1><p>Qt 最传统和强大的开发方式，使用 C++ 语言直接调用 Qt 的 API。</p><p>开发工具可以使用如下：</p><ul><li><strong>Qt Creator</strong>（最好的方法）：Qt 官方提供的集成开发环境（IDE），支持代码编辑、调试、UI 设计等功能。</li><li><strong>Qt Designer</strong>：用于设计 GUI 界面，生成 <code>.ui</code> 文件，可以与 C++ 代码结合使用，用Designer生成ui文件之后使用其他C++的IDE调用ui中的每个模块编写功能实现，最后合到一起。</li></ul><h1>Python开发方式</h1><h2 id="pyqt">Pyqt</h2><p>提供了完整的 Qt 模块支持。</p><p>pyQT的安装不需要在官网下载QT安装包，只需要创建conda环境然后pip安装，安装pyQT5-tools之后会安装QT designer，然后就可以可视化设计一个UI，然后通过Pyuic工具就可以转化为一个py文件，这个py文件就是整个工程，py文件中有一个class包含了整个UI设计，然后只需要编辑py文件中这个class的功能即可，编辑子函数。</p><p>开发工具可以使用如下：</p><ul><li><strong>Qt Designer</strong>：用于设计 UI，生成 <code>.ui</code> 文件，可以通过 PyQt 或 PySide 加载。</li><li><strong>Qt Creator</strong>：支持 Python 项目的开发。</li><li><strong>第三方 IDE</strong>：如 PyCharm、VS Code 等。</li></ul><h2 id="pyside">PySide</h2><p>与 PyQt 类似，但 API 更接近原生 Qt。</p><h1>QML（Qt Meta-Object Language）</h1><p>QML 是一种声明式语言，用于设计用户界面，与 JavaScript 结合使用，适合开发现代化的、动态的 UI。为了适应手机移动应用开发， Qt5 将 QML 脚本编程提到与传统 C++ 部件编程相同的高度，力推 QML 界面编程，当然 QML 主要用于手机移动应用程序。 QML 包含大量使用手机移动设备的功能模块，比如基本部件（QtQuick 模块）、GPS 定位、渲染特效、蓝牙、NFC、WebkKit 等等。<br>QML 类似于网页设计的 HTML，是一种标记语言，我们可以借助 CSS 对它进行美化，也可以借助 <a href="http://c.biancheng.net/js/">JavaScript</a> 进行交互。有 Web 开发经验的读者学习 QML 将非常轻松。</p><p>以下两个特点很重要</p><ul><li><p>与 C++ 结合：QML 可以与 C++ 后端逻辑结合，实现复杂的业务逻辑。</p></li><li><p>动画和特效：QML 内置了对动画和特效的支持，适合开发动态界面。可以实现富动画和特效的应用程序。</p></li><li><p>适用移动应用程序（如 Android、iOS）</p></li></ul><p>开发工具可以使用如下：</p><ul><li><strong>Qt Creator</strong>（最好的方法）：Qt 官方提供的集成开发环境（IDE），支持代码编辑、调试、UI 设计等功能。</li><li><strong>Qt Quick Designer</strong>：用于设计 QML 界面。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;QT 的不同开发方式&lt;/h1&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;QT的简要介绍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用类套壳的UI库，同时还提供了一些IDE，UI编辑工具等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时QT的库中还有3D，图像处理，SQL数据库，音频处理，</summary>
      
    
    
    
    <category term="配置环境" scheme="http://outbreak-sen.github.io/categories/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="QT" scheme="http://outbreak-sen.github.io/tags/QT/"/>
    
    <category term="shell" scheme="http://outbreak-sen.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Test Post</title>
    <link href="http://outbreak-sen.github.io/2024/12/06/TestPost/"/>
    <id>http://outbreak-sen.github.io/2024/12/06/TestPost/</id>
    <published>2024-12-06T13:44:10.000Z</published>
    <updated>2025-02-09T08:23:45.392Z</updated>
    
    <content type="html"><![CDATA[<!-- Not be created by command line. --><p>发现直接md，但是需要日期，所以用命令行创建。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- Not be created by command line. --&gt;
&lt;p&gt;发现直接md，但是需要日期，所以用命令行创建。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="这个一个测试1" scheme="http://outbreak-sen.github.io/categories/%E8%BF%99%E4%B8%AA%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%951/"/>
    
    
    <category term="这也是一个测试" scheme="http://outbreak-sen.github.io/tags/%E8%BF%99%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
